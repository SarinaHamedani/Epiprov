/**
 * generated by Xtext 2.37.0
 */
package org.w3.ns.prov.provN.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.w3.ns.prov.provN.Activity;
import org.w3.ns.prov.provN.Agent;
import org.w3.ns.prov.provN.Attribute;
import org.w3.ns.prov.provN.Entity;
import org.w3.ns.prov.provN.ProvNPackage;
import org.w3.ns.prov.provN.WasAssociatedWith;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Was Associated With</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.w3.ns.prov.provN.impl.WasAssociatedWithImpl#getActivity <em>Activity</em>}</li>
 *   <li>{@link org.w3.ns.prov.provN.impl.WasAssociatedWithImpl#getAgent <em>Agent</em>}</li>
 *   <li>{@link org.w3.ns.prov.provN.impl.WasAssociatedWithImpl#getPlan <em>Plan</em>}</li>
 *   <li>{@link org.w3.ns.prov.provN.impl.WasAssociatedWithImpl#getAttributes <em>Attributes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WasAssociatedWithImpl extends RelationImpl implements WasAssociatedWith
{
  /**
   * The cached value of the '{@link #getActivity() <em>Activity</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivity()
   * @generated
   * @ordered
   */
  protected Activity activity;

  /**
   * The cached value of the '{@link #getAgent() <em>Agent</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAgent()
   * @generated
   * @ordered
   */
  protected Agent agent;

  /**
   * The cached value of the '{@link #getPlan() <em>Plan</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlan()
   * @generated
   * @ordered
   */
  protected Entity plan;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attributes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WasAssociatedWithImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ProvNPackage.Literals.WAS_ASSOCIATED_WITH;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Activity getActivity()
  {
    if (activity != null && activity.eIsProxy())
    {
      InternalEObject oldActivity = (InternalEObject)activity;
      activity = (Activity)eResolveProxy(oldActivity);
      if (activity != oldActivity)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProvNPackage.WAS_ASSOCIATED_WITH__ACTIVITY, oldActivity, activity));
      }
    }
    return activity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Activity basicGetActivity()
  {
    return activity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setActivity(Activity newActivity)
  {
    Activity oldActivity = activity;
    activity = newActivity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProvNPackage.WAS_ASSOCIATED_WITH__ACTIVITY, oldActivity, activity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Agent getAgent()
  {
    if (agent != null && agent.eIsProxy())
    {
      InternalEObject oldAgent = (InternalEObject)agent;
      agent = (Agent)eResolveProxy(oldAgent);
      if (agent != oldAgent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProvNPackage.WAS_ASSOCIATED_WITH__AGENT, oldAgent, agent));
      }
    }
    return agent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Agent basicGetAgent()
  {
    return agent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAgent(Agent newAgent)
  {
    Agent oldAgent = agent;
    agent = newAgent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProvNPackage.WAS_ASSOCIATED_WITH__AGENT, oldAgent, agent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getPlan()
  {
    if (plan != null && plan.eIsProxy())
    {
      InternalEObject oldPlan = (InternalEObject)plan;
      plan = (Entity)eResolveProxy(oldPlan);
      if (plan != oldPlan)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProvNPackage.WAS_ASSOCIATED_WITH__PLAN, oldPlan, plan));
      }
    }
    return plan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetPlan()
  {
    return plan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlan(Entity newPlan)
  {
    Entity oldPlan = plan;
    plan = newPlan;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProvNPackage.WAS_ASSOCIATED_WITH__PLAN, oldPlan, plan));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, ProvNPackage.WAS_ASSOCIATED_WITH__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ProvNPackage.WAS_ASSOCIATED_WITH__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ProvNPackage.WAS_ASSOCIATED_WITH__ACTIVITY:
        if (resolve) return getActivity();
        return basicGetActivity();
      case ProvNPackage.WAS_ASSOCIATED_WITH__AGENT:
        if (resolve) return getAgent();
        return basicGetAgent();
      case ProvNPackage.WAS_ASSOCIATED_WITH__PLAN:
        if (resolve) return getPlan();
        return basicGetPlan();
      case ProvNPackage.WAS_ASSOCIATED_WITH__ATTRIBUTES:
        return getAttributes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ProvNPackage.WAS_ASSOCIATED_WITH__ACTIVITY:
        setActivity((Activity)newValue);
        return;
      case ProvNPackage.WAS_ASSOCIATED_WITH__AGENT:
        setAgent((Agent)newValue);
        return;
      case ProvNPackage.WAS_ASSOCIATED_WITH__PLAN:
        setPlan((Entity)newValue);
        return;
      case ProvNPackage.WAS_ASSOCIATED_WITH__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ProvNPackage.WAS_ASSOCIATED_WITH__ACTIVITY:
        setActivity((Activity)null);
        return;
      case ProvNPackage.WAS_ASSOCIATED_WITH__AGENT:
        setAgent((Agent)null);
        return;
      case ProvNPackage.WAS_ASSOCIATED_WITH__PLAN:
        setPlan((Entity)null);
        return;
      case ProvNPackage.WAS_ASSOCIATED_WITH__ATTRIBUTES:
        getAttributes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ProvNPackage.WAS_ASSOCIATED_WITH__ACTIVITY:
        return activity != null;
      case ProvNPackage.WAS_ASSOCIATED_WITH__AGENT:
        return agent != null;
      case ProvNPackage.WAS_ASSOCIATED_WITH__PLAN:
        return plan != null;
      case ProvNPackage.WAS_ASSOCIATED_WITH__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //WasAssociatedWithImpl
