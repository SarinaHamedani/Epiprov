/**
 * generated by Xtext 2.37.0
 */
package org.w3.ns.prov.provN.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.w3.ns.prov.provN.Activity;
import org.w3.ns.prov.provN.Attribute;
import org.w3.ns.prov.provN.DateTime;
import org.w3.ns.prov.provN.ProvNPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Activity</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.w3.ns.prov.provN.impl.ActivityImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.w3.ns.prov.provN.impl.ActivityImpl#getStartTime <em>Start Time</em>}</li>
 *   <li>{@link org.w3.ns.prov.provN.impl.ActivityImpl#getEndTime <em>End Time</em>}</li>
 *   <li>{@link org.w3.ns.prov.provN.impl.ActivityImpl#getAttributes <em>Attributes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActivityImpl extends StatementImpl implements Activity
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getStartTime() <em>Start Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartTime()
   * @generated
   * @ordered
   */
  protected DateTime startTime;

  /**
   * The cached value of the '{@link #getEndTime() <em>End Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndTime()
   * @generated
   * @ordered
   */
  protected DateTime endTime;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attributes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ProvNPackage.Literals.ACTIVITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProvNPackage.ACTIVITY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DateTime getStartTime()
  {
    return startTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartTime(DateTime newStartTime, NotificationChain msgs)
  {
    DateTime oldStartTime = startTime;
    startTime = newStartTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ProvNPackage.ACTIVITY__START_TIME, oldStartTime, newStartTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartTime(DateTime newStartTime)
  {
    if (newStartTime != startTime)
    {
      NotificationChain msgs = null;
      if (startTime != null)
        msgs = ((InternalEObject)startTime).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ProvNPackage.ACTIVITY__START_TIME, null, msgs);
      if (newStartTime != null)
        msgs = ((InternalEObject)newStartTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ProvNPackage.ACTIVITY__START_TIME, null, msgs);
      msgs = basicSetStartTime(newStartTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProvNPackage.ACTIVITY__START_TIME, newStartTime, newStartTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DateTime getEndTime()
  {
    return endTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEndTime(DateTime newEndTime, NotificationChain msgs)
  {
    DateTime oldEndTime = endTime;
    endTime = newEndTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ProvNPackage.ACTIVITY__END_TIME, oldEndTime, newEndTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndTime(DateTime newEndTime)
  {
    if (newEndTime != endTime)
    {
      NotificationChain msgs = null;
      if (endTime != null)
        msgs = ((InternalEObject)endTime).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ProvNPackage.ACTIVITY__END_TIME, null, msgs);
      if (newEndTime != null)
        msgs = ((InternalEObject)newEndTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ProvNPackage.ACTIVITY__END_TIME, null, msgs);
      msgs = basicSetEndTime(newEndTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProvNPackage.ACTIVITY__END_TIME, newEndTime, newEndTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, ProvNPackage.ACTIVITY__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ProvNPackage.ACTIVITY__START_TIME:
        return basicSetStartTime(null, msgs);
      case ProvNPackage.ACTIVITY__END_TIME:
        return basicSetEndTime(null, msgs);
      case ProvNPackage.ACTIVITY__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ProvNPackage.ACTIVITY__NAME:
        return getName();
      case ProvNPackage.ACTIVITY__START_TIME:
        return getStartTime();
      case ProvNPackage.ACTIVITY__END_TIME:
        return getEndTime();
      case ProvNPackage.ACTIVITY__ATTRIBUTES:
        return getAttributes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ProvNPackage.ACTIVITY__NAME:
        setName((String)newValue);
        return;
      case ProvNPackage.ACTIVITY__START_TIME:
        setStartTime((DateTime)newValue);
        return;
      case ProvNPackage.ACTIVITY__END_TIME:
        setEndTime((DateTime)newValue);
        return;
      case ProvNPackage.ACTIVITY__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ProvNPackage.ACTIVITY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ProvNPackage.ACTIVITY__START_TIME:
        setStartTime((DateTime)null);
        return;
      case ProvNPackage.ACTIVITY__END_TIME:
        setEndTime((DateTime)null);
        return;
      case ProvNPackage.ACTIVITY__ATTRIBUTES:
        getAttributes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ProvNPackage.ACTIVITY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ProvNPackage.ACTIVITY__START_TIME:
        return startTime != null;
      case ProvNPackage.ACTIVITY__END_TIME:
        return endTime != null;
      case ProvNPackage.ACTIVITY__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ActivityImpl
