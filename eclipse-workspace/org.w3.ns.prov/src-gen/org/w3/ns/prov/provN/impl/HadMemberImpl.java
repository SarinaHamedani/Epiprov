/**
 * generated by Xtext 2.37.0
 */
package org.w3.ns.prov.provN.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.w3.ns.prov.provN.Entity;
import org.w3.ns.prov.provN.HadMember;
import org.w3.ns.prov.provN.ProvNPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Had Member</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.w3.ns.prov.provN.impl.HadMemberImpl#getCollection <em>Collection</em>}</li>
 *   <li>{@link org.w3.ns.prov.provN.impl.HadMemberImpl#getMember <em>Member</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HadMemberImpl extends RelationImpl implements HadMember
{
  /**
   * The cached value of the '{@link #getCollection() <em>Collection</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollection()
   * @generated
   * @ordered
   */
  protected Entity collection;

  /**
   * The cached value of the '{@link #getMember() <em>Member</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMember()
   * @generated
   * @ordered
   */
  protected Entity member;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HadMemberImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ProvNPackage.Literals.HAD_MEMBER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getCollection()
  {
    if (collection != null && collection.eIsProxy())
    {
      InternalEObject oldCollection = (InternalEObject)collection;
      collection = (Entity)eResolveProxy(oldCollection);
      if (collection != oldCollection)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProvNPackage.HAD_MEMBER__COLLECTION, oldCollection, collection));
      }
    }
    return collection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetCollection()
  {
    return collection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCollection(Entity newCollection)
  {
    Entity oldCollection = collection;
    collection = newCollection;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProvNPackage.HAD_MEMBER__COLLECTION, oldCollection, collection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getMember()
  {
    if (member != null && member.eIsProxy())
    {
      InternalEObject oldMember = (InternalEObject)member;
      member = (Entity)eResolveProxy(oldMember);
      if (member != oldMember)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProvNPackage.HAD_MEMBER__MEMBER, oldMember, member));
      }
    }
    return member;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetMember()
  {
    return member;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMember(Entity newMember)
  {
    Entity oldMember = member;
    member = newMember;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProvNPackage.HAD_MEMBER__MEMBER, oldMember, member));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ProvNPackage.HAD_MEMBER__COLLECTION:
        if (resolve) return getCollection();
        return basicGetCollection();
      case ProvNPackage.HAD_MEMBER__MEMBER:
        if (resolve) return getMember();
        return basicGetMember();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ProvNPackage.HAD_MEMBER__COLLECTION:
        setCollection((Entity)newValue);
        return;
      case ProvNPackage.HAD_MEMBER__MEMBER:
        setMember((Entity)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ProvNPackage.HAD_MEMBER__COLLECTION:
        setCollection((Entity)null);
        return;
      case ProvNPackage.HAD_MEMBER__MEMBER:
        setMember((Entity)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ProvNPackage.HAD_MEMBER__COLLECTION:
        return collection != null;
      case ProvNPackage.HAD_MEMBER__MEMBER:
        return member != null;
    }
    return super.eIsSet(featureID);
  }

} //HadMemberImpl
