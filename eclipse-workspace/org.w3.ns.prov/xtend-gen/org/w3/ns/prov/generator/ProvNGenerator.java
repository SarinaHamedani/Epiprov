/**
 * generated by Xtext 2.37.0
 */
package org.w3.ns.prov.generator;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Objects;
import java.util.Random;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.w3.ns.prov.provN.Attribute;
import org.w3.ns.prov.provN.Document;
import org.w3.ns.prov.provN.Entity;
import org.w3.ns.prov.provN.Statement;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ProvNGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Document doc = ((Document) _head);
    final StringConcatenation sb = new StringConcatenation();
    sb.append("Agent Expert1");
    sb.newLine();
    sb.append("Agent Expert2");
    sb.newLine();
    sb.newLine();
    final Random rand = new Random();
    EList<Statement> _statements = doc.getName().getStatements();
    for (final Statement stmt : _statements) {
      if ((stmt instanceof Entity)) {
        final Entity entity = ((Entity) stmt);
        final Function1<Attribute, Boolean> _function = (Attribute a) -> {
          String _label = a.getLabel();
          return Boolean.valueOf(Objects.equals(_label, "prov:value"));
        };
        final Attribute valueAttr = IterableExtensions.<Attribute>head(IterableExtensions.<Attribute>filter(entity.getAttributes(), _function));
        if ((valueAttr != null)) {
          final double paramValue = Double.parseDouble(valueAttr.getValue());
          String _xifexpression = null;
          boolean _contains = entity.getName().contains(":");
          if (_contains) {
            String _name = entity.getName();
            int _indexOf = entity.getName().indexOf(":");
            int _plus = (_indexOf + 1);
            _xifexpression = _name.substring(_plus);
          } else {
            _xifexpression = entity.getName();
          }
          final String localName = _xifexpression;
          sb.append((("UncertainElement " + localName) + " {"));
          sb.newLine();
          sb.append("    beliefs {");
          sb.newLine();
          final String beliefName1 = ("Expert1_" + localName);
          final String belief1 = this.generateBelief(beliefName1, "Expert1", rand, paramValue);
          sb.append(("        " + belief1));
          sb.append(",");
          sb.newLine();
          final String beliefName2 = ("Expert2_" + localName);
          final String belief2 = this.generateBelief(beliefName2, "Expert2", rand, paramValue);
          sb.append(("        " + belief2));
          sb.newLine();
          sb.append("    }");
          sb.newLine();
          sb.append("}");
          sb.newLine();
          sb.newLine();
        }
      }
    }
    fsa.generateFile("ontario.trustdsl", sb.toString());
  }

  public String generateBelief(final String beliefName, final String agentName, final Random rand, final double baseRate) {
    double belief = rand.nextDouble();
    double uncertainty = rand.nextDouble((1 - belief));
    double disbelief = ((1 - belief) - uncertainty);
    belief = this.round(belief, 2);
    disbelief = this.round(disbelief, 2);
    uncertainty = this.round(uncertainty, 2);
    final double total = ((belief + disbelief) + uncertainty);
    if ((total != 1.0)) {
      final double difference = (1.0 - total);
      double _disbelief = disbelief;
      disbelief = (_disbelief + difference);
      disbelief = this.round(disbelief, 2);
    }
    return (((((((((((("Belief " + beliefName) + " (") + agentName) + ", (") + Double.valueOf(belief)) + ", ") + Double.valueOf(disbelief)) + ", ") + Double.valueOf(uncertainty)) + ", ") + Double.valueOf(baseRate)) + "))");
  }

  public double round(final double value, final int places) {
    if ((places < 0)) {
      throw new IllegalArgumentException();
    }
    BigDecimal bd = BigDecimal.valueOf(value);
    bd = bd.setScale(places, RoundingMode.HALF_UP);
    return bd.doubleValue();
  }
}
