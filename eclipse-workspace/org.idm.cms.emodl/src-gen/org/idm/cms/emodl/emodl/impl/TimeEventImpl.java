/**
 * generated by Xtext 2.37.0
 */
package org.idm.cms.emodl.emodl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.idm.cms.emodl.emodl.EmodlPackage;
import org.idm.cms.emodl.emodl.TimeEvent;
import org.idm.cms.emodl.emodl.VariableValuePairs;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Time Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.TimeEventImpl#getTime <em>Time</em>}</li>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.TimeEventImpl#getIterations <em>Iterations</em>}</li>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.TimeEventImpl#getVariableValuePairs <em>Variable Value Pairs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TimeEventImpl extends ElementImpl implements TimeEvent
{
  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final double TIME_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected double time = TIME_EDEFAULT;

  /**
   * The default value of the '{@link #getIterations() <em>Iterations</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterations()
   * @generated
   * @ordered
   */
  protected static final int ITERATIONS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getIterations() <em>Iterations</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterations()
   * @generated
   * @ordered
   */
  protected int iterations = ITERATIONS_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariableValuePairs() <em>Variable Value Pairs</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariableValuePairs()
   * @generated
   * @ordered
   */
  protected VariableValuePairs variableValuePairs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TimeEventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EmodlPackage.Literals.TIME_EVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(double newTime)
  {
    double oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EmodlPackage.TIME_EVENT__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getIterations()
  {
    return iterations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIterations(int newIterations)
  {
    int oldIterations = iterations;
    iterations = newIterations;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EmodlPackage.TIME_EVENT__ITERATIONS, oldIterations, iterations));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValuePairs getVariableValuePairs()
  {
    return variableValuePairs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariableValuePairs(VariableValuePairs newVariableValuePairs, NotificationChain msgs)
  {
    VariableValuePairs oldVariableValuePairs = variableValuePairs;
    variableValuePairs = newVariableValuePairs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EmodlPackage.TIME_EVENT__VARIABLE_VALUE_PAIRS, oldVariableValuePairs, newVariableValuePairs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariableValuePairs(VariableValuePairs newVariableValuePairs)
  {
    if (newVariableValuePairs != variableValuePairs)
    {
      NotificationChain msgs = null;
      if (variableValuePairs != null)
        msgs = ((InternalEObject)variableValuePairs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EmodlPackage.TIME_EVENT__VARIABLE_VALUE_PAIRS, null, msgs);
      if (newVariableValuePairs != null)
        msgs = ((InternalEObject)newVariableValuePairs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EmodlPackage.TIME_EVENT__VARIABLE_VALUE_PAIRS, null, msgs);
      msgs = basicSetVariableValuePairs(newVariableValuePairs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EmodlPackage.TIME_EVENT__VARIABLE_VALUE_PAIRS, newVariableValuePairs, newVariableValuePairs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EmodlPackage.TIME_EVENT__VARIABLE_VALUE_PAIRS:
        return basicSetVariableValuePairs(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EmodlPackage.TIME_EVENT__TIME:
        return getTime();
      case EmodlPackage.TIME_EVENT__ITERATIONS:
        return getIterations();
      case EmodlPackage.TIME_EVENT__VARIABLE_VALUE_PAIRS:
        return getVariableValuePairs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EmodlPackage.TIME_EVENT__TIME:
        setTime((Double)newValue);
        return;
      case EmodlPackage.TIME_EVENT__ITERATIONS:
        setIterations((Integer)newValue);
        return;
      case EmodlPackage.TIME_EVENT__VARIABLE_VALUE_PAIRS:
        setVariableValuePairs((VariableValuePairs)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EmodlPackage.TIME_EVENT__TIME:
        setTime(TIME_EDEFAULT);
        return;
      case EmodlPackage.TIME_EVENT__ITERATIONS:
        setIterations(ITERATIONS_EDEFAULT);
        return;
      case EmodlPackage.TIME_EVENT__VARIABLE_VALUE_PAIRS:
        setVariableValuePairs((VariableValuePairs)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EmodlPackage.TIME_EVENT__TIME:
        return time != TIME_EDEFAULT;
      case EmodlPackage.TIME_EVENT__ITERATIONS:
        return iterations != ITERATIONS_EDEFAULT;
      case EmodlPackage.TIME_EVENT__VARIABLE_VALUE_PAIRS:
        return variableValuePairs != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (time: ");
    result.append(time);
    result.append(", iterations: ");
    result.append(iterations);
    result.append(')');
    return result.toString();
  }

} //TimeEventImpl
