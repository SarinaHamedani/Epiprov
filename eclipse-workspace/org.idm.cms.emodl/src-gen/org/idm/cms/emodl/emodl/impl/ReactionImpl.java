/**
 * generated by Xtext 2.37.0
 */
package org.idm.cms.emodl.emodl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.idm.cms.emodl.emodl.EmodlPackage;
import org.idm.cms.emodl.emodl.Expression;
import org.idm.cms.emodl.emodl.Reaction;
import org.idm.cms.emodl.emodl.Species;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Reaction</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.ReactionImpl#getInputSpecies <em>Input Species</em>}</li>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.ReactionImpl#getOutputSpecies <em>Output Species</em>}</li>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.ReactionImpl#getPropensityFunction <em>Propensity Function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReactionImpl extends ElementImpl implements Reaction
{
  /**
   * The cached value of the '{@link #getInputSpecies() <em>Input Species</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputSpecies()
   * @generated
   * @ordered
   */
  protected EList<Species> inputSpecies;

  /**
   * The cached value of the '{@link #getOutputSpecies() <em>Output Species</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputSpecies()
   * @generated
   * @ordered
   */
  protected EList<Species> outputSpecies;

  /**
   * The cached value of the '{@link #getPropensityFunction() <em>Propensity Function</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropensityFunction()
   * @generated
   * @ordered
   */
  protected Expression propensityFunction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReactionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EmodlPackage.Literals.REACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Species> getInputSpecies()
  {
    if (inputSpecies == null)
    {
      inputSpecies = new EObjectResolvingEList<Species>(Species.class, this, EmodlPackage.REACTION__INPUT_SPECIES);
    }
    return inputSpecies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Species> getOutputSpecies()
  {
    if (outputSpecies == null)
    {
      outputSpecies = new EObjectResolvingEList<Species>(Species.class, this, EmodlPackage.REACTION__OUTPUT_SPECIES);
    }
    return outputSpecies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getPropensityFunction()
  {
    return propensityFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPropensityFunction(Expression newPropensityFunction, NotificationChain msgs)
  {
    Expression oldPropensityFunction = propensityFunction;
    propensityFunction = newPropensityFunction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EmodlPackage.REACTION__PROPENSITY_FUNCTION, oldPropensityFunction, newPropensityFunction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPropensityFunction(Expression newPropensityFunction)
  {
    if (newPropensityFunction != propensityFunction)
    {
      NotificationChain msgs = null;
      if (propensityFunction != null)
        msgs = ((InternalEObject)propensityFunction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EmodlPackage.REACTION__PROPENSITY_FUNCTION, null, msgs);
      if (newPropensityFunction != null)
        msgs = ((InternalEObject)newPropensityFunction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EmodlPackage.REACTION__PROPENSITY_FUNCTION, null, msgs);
      msgs = basicSetPropensityFunction(newPropensityFunction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EmodlPackage.REACTION__PROPENSITY_FUNCTION, newPropensityFunction, newPropensityFunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EmodlPackage.REACTION__PROPENSITY_FUNCTION:
        return basicSetPropensityFunction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EmodlPackage.REACTION__INPUT_SPECIES:
        return getInputSpecies();
      case EmodlPackage.REACTION__OUTPUT_SPECIES:
        return getOutputSpecies();
      case EmodlPackage.REACTION__PROPENSITY_FUNCTION:
        return getPropensityFunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EmodlPackage.REACTION__INPUT_SPECIES:
        getInputSpecies().clear();
        getInputSpecies().addAll((Collection<? extends Species>)newValue);
        return;
      case EmodlPackage.REACTION__OUTPUT_SPECIES:
        getOutputSpecies().clear();
        getOutputSpecies().addAll((Collection<? extends Species>)newValue);
        return;
      case EmodlPackage.REACTION__PROPENSITY_FUNCTION:
        setPropensityFunction((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EmodlPackage.REACTION__INPUT_SPECIES:
        getInputSpecies().clear();
        return;
      case EmodlPackage.REACTION__OUTPUT_SPECIES:
        getOutputSpecies().clear();
        return;
      case EmodlPackage.REACTION__PROPENSITY_FUNCTION:
        setPropensityFunction((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EmodlPackage.REACTION__INPUT_SPECIES:
        return inputSpecies != null && !inputSpecies.isEmpty();
      case EmodlPackage.REACTION__OUTPUT_SPECIES:
        return outputSpecies != null && !outputSpecies.isEmpty();
      case EmodlPackage.REACTION__PROPENSITY_FUNCTION:
        return propensityFunction != null;
    }
    return super.eIsSet(featureID);
  }

} //ReactionImpl
