/**
 * generated by Xtext 2.37.0
 */
package org.idm.cms.emodl.emodl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.idm.cms.emodl.emodl.EModel;
import org.idm.cms.emodl.emodl.Element;
import org.idm.cms.emodl.emodl.EmodlPackage;
import org.idm.cms.emodl.emodl.EndModel;
import org.idm.cms.emodl.emodl.Import;
import org.idm.cms.emodl.emodl.StartModel;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EModel</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.EModelImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.EModelImpl#getStartModel <em>Start Model</em>}</li>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.EModelImpl#getElements <em>Elements</em>}</li>
 *   <li>{@link org.idm.cms.emodl.emodl.impl.EModelImpl#getEndModel <em>End Model</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EModelImpl extends MinimalEObjectImpl.Container implements EModel
{
  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getStartModel() <em>Start Model</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartModel()
   * @generated
   * @ordered
   */
  protected StartModel startModel;

  /**
   * The cached value of the '{@link #getElements() <em>Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElements()
   * @generated
   * @ordered
   */
  protected EList<Element> elements;

  /**
   * The cached value of the '{@link #getEndModel() <em>End Model</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndModel()
   * @generated
   * @ordered
   */
  protected EndModel endModel;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EmodlPackage.Literals.EMODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, EmodlPackage.EMODEL__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartModel getStartModel()
  {
    return startModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartModel(StartModel newStartModel, NotificationChain msgs)
  {
    StartModel oldStartModel = startModel;
    startModel = newStartModel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EmodlPackage.EMODEL__START_MODEL, oldStartModel, newStartModel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartModel(StartModel newStartModel)
  {
    if (newStartModel != startModel)
    {
      NotificationChain msgs = null;
      if (startModel != null)
        msgs = ((InternalEObject)startModel).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EmodlPackage.EMODEL__START_MODEL, null, msgs);
      if (newStartModel != null)
        msgs = ((InternalEObject)newStartModel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EmodlPackage.EMODEL__START_MODEL, null, msgs);
      msgs = basicSetStartModel(newStartModel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EmodlPackage.EMODEL__START_MODEL, newStartModel, newStartModel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Element> getElements()
  {
    if (elements == null)
    {
      elements = new EObjectContainmentEList<Element>(Element.class, this, EmodlPackage.EMODEL__ELEMENTS);
    }
    return elements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndModel getEndModel()
  {
    return endModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEndModel(EndModel newEndModel, NotificationChain msgs)
  {
    EndModel oldEndModel = endModel;
    endModel = newEndModel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EmodlPackage.EMODEL__END_MODEL, oldEndModel, newEndModel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndModel(EndModel newEndModel)
  {
    if (newEndModel != endModel)
    {
      NotificationChain msgs = null;
      if (endModel != null)
        msgs = ((InternalEObject)endModel).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EmodlPackage.EMODEL__END_MODEL, null, msgs);
      if (newEndModel != null)
        msgs = ((InternalEObject)newEndModel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EmodlPackage.EMODEL__END_MODEL, null, msgs);
      msgs = basicSetEndModel(newEndModel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EmodlPackage.EMODEL__END_MODEL, newEndModel, newEndModel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EmodlPackage.EMODEL__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case EmodlPackage.EMODEL__START_MODEL:
        return basicSetStartModel(null, msgs);
      case EmodlPackage.EMODEL__ELEMENTS:
        return ((InternalEList<?>)getElements()).basicRemove(otherEnd, msgs);
      case EmodlPackage.EMODEL__END_MODEL:
        return basicSetEndModel(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EmodlPackage.EMODEL__IMPORTS:
        return getImports();
      case EmodlPackage.EMODEL__START_MODEL:
        return getStartModel();
      case EmodlPackage.EMODEL__ELEMENTS:
        return getElements();
      case EmodlPackage.EMODEL__END_MODEL:
        return getEndModel();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EmodlPackage.EMODEL__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case EmodlPackage.EMODEL__START_MODEL:
        setStartModel((StartModel)newValue);
        return;
      case EmodlPackage.EMODEL__ELEMENTS:
        getElements().clear();
        getElements().addAll((Collection<? extends Element>)newValue);
        return;
      case EmodlPackage.EMODEL__END_MODEL:
        setEndModel((EndModel)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EmodlPackage.EMODEL__IMPORTS:
        getImports().clear();
        return;
      case EmodlPackage.EMODEL__START_MODEL:
        setStartModel((StartModel)null);
        return;
      case EmodlPackage.EMODEL__ELEMENTS:
        getElements().clear();
        return;
      case EmodlPackage.EMODEL__END_MODEL:
        setEndModel((EndModel)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EmodlPackage.EMODEL__IMPORTS:
        return imports != null && !imports.isEmpty();
      case EmodlPackage.EMODEL__START_MODEL:
        return startModel != null;
      case EmodlPackage.EMODEL__ELEMENTS:
        return elements != null && !elements.isEmpty();
      case EmodlPackage.EMODEL__END_MODEL:
        return endModel != null;
    }
    return super.eIsSet(featureID);
  }

} //EModelImpl
