/**
 * generated by Xtext 2.37.0
 */
package org.idm.cms.emodl.emodl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.idm.cms.emodl.emodl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.idm.cms.emodl.emodl.EmodlPackage
 * @generated
 */
public class EmodlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static EmodlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EmodlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = EmodlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EmodlSwitch<Adapter> modelSwitch =
    new EmodlSwitch<Adapter>()
    {
      @Override
      public Adapter caseEModel(EModel object)
      {
        return createEModelAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseImportGroup(ImportGroup object)
      {
        return createImportGroupAdapter();
      }
      @Override
      public Adapter caseStartModel(StartModel object)
      {
        return createStartModelAdapter();
      }
      @Override
      public Adapter caseEndModel(EndModel object)
      {
        return createEndModelAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseSpecies(Species object)
      {
        return createSpeciesAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseObservable(Observable object)
      {
        return createObservableAdapter();
      }
      @Override
      public Adapter caseReaction(Reaction object)
      {
        return createReactionAdapter();
      }
      @Override
      public Adapter caseStateEvent(StateEvent object)
      {
        return createStateEventAdapter();
      }
      @Override
      public Adapter caseTimeEvent(TimeEvent object)
      {
        return createTimeEventAdapter();
      }
      @Override
      public Adapter caseLocale(Locale object)
      {
        return createLocaleAdapter();
      }
      @Override
      public Adapter caseSetLocale(SetLocale object)
      {
        return createSetLocaleAdapter();
      }
      @Override
      public Adapter caseJson(Json object)
      {
        return createJsonAdapter();
      }
      @Override
      public Adapter caseVariableValuePairs(VariableValuePairs object)
      {
        return createVariableValuePairsAdapter();
      }
      @Override
      public Adapter caseVariableValuePair(VariableValuePair object)
      {
        return createVariableValuePairAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.EModel <em>EModel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.EModel
   * @generated
   */
  public Adapter createEModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.ImportGroup <em>Import Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.ImportGroup
   * @generated
   */
  public Adapter createImportGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.StartModel <em>Start Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.StartModel
   * @generated
   */
  public Adapter createStartModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.EndModel <em>End Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.EndModel
   * @generated
   */
  public Adapter createEndModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Species <em>Species</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Species
   * @generated
   */
  public Adapter createSpeciesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Observable <em>Observable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Observable
   * @generated
   */
  public Adapter createObservableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Reaction <em>Reaction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Reaction
   * @generated
   */
  public Adapter createReactionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.StateEvent <em>State Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.StateEvent
   * @generated
   */
  public Adapter createStateEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.TimeEvent <em>Time Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.TimeEvent
   * @generated
   */
  public Adapter createTimeEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Locale <em>Locale</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Locale
   * @generated
   */
  public Adapter createLocaleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.SetLocale <em>Set Locale</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.SetLocale
   * @generated
   */
  public Adapter createSetLocaleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Json <em>Json</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Json
   * @generated
   */
  public Adapter createJsonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.VariableValuePairs <em>Variable Value Pairs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.VariableValuePairs
   * @generated
   */
  public Adapter createVariableValuePairsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.VariableValuePair <em>Variable Value Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.VariableValuePair
   * @generated
   */
  public Adapter createVariableValuePairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.idm.cms.emodl.emodl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.idm.cms.emodl.emodl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //EmodlAdapterFactory
