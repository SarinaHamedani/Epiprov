/*
 * generated by Xtext 2.37.0
 */
grammar InternalEmodl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.idm.cms.emodl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.idm.cms.emodl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.idm.cms.emodl.services.EmodlGrammarAccess;

}

@parser::members {

 	private EmodlGrammarAccess grammarAccess;

    public InternalEmodlParser(TokenStream input, EmodlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected EmodlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"org.idm.cms.emodl.Emodl.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getStartModelStartModelParserRuleCall_1_0());
				}
				lv_startModel_1_0=ruleStartModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"startModel",
						lv_startModel_1_0,
						"org.idm.cms.emodl.Emodl.StartModel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementsElementParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_2_0,
						"org.idm.cms.emodl.Emodl.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getEndModelEndModelParserRuleCall_3_0());
				}
				lv_endModel_3_0=ruleEndModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"endModel",
						lv_endModel_3_0,
						"org.idm.cms.emodl.Emodl.EndModel");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getImportAccess().getImportAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getImportAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2='import'
		{
			newLeafNode(otherlv_2, grammarAccess.getImportAccess().getImportKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getGroupsImportGroupParserRuleCall_3_0());
				}
				lv_groups_3_0=ruleImportGroup
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					add(
						$current,
						"groups",
						lv_groups_3_0,
						"org.idm.cms.emodl.Emodl.ImportGroup");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getImportAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleImportGroup
entryRuleImportGroup returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportGroupRule()); }
	iv_ruleImportGroup=ruleImportGroup
	{ $current=$iv_ruleImportGroup.current; }
	EOF;

// Rule ImportGroup
ruleImportGroup returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getImportGroupAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_imports_1_0=RULE_ID
				{
					newLeafNode(lv_imports_1_0, grammarAccess.getImportGroupAccess().getImportsIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportGroupRule());
					}
					addWithLastConsumed(
						$current,
						"imports",
						lv_imports_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)+
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getImportGroupAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleStartModel
entryRuleStartModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartModelRule()); }
	iv_ruleStartModel=ruleStartModel
	{ $current=$iv_ruleStartModel.current; }
	EOF;

// Rule StartModel
ruleStartModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(start-model'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartModelAccess().getStartModelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStartModelAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getStartModelAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleEndModel
entryRuleEndModel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEndModelRule()); }
	iv_ruleEndModel=ruleEndModel
	{ $current=$iv_ruleEndModel.current.getText(); }
	EOF;

// Rule EndModel
ruleEndModel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='(end-model)'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEndModelAccess().getEndModelKeyword());
	}
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_INLINE_COMMENT", "RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_INLINE_COMMENT", "RULE_WS");
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getSpeciesParserRuleCall_0());
		}
		this_Species_0=ruleSpecies
		{
			$current = $this_Species_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getParameterParserRuleCall_1());
		}
		this_Parameter_1=ruleParameter
		{
			$current = $this_Parameter_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getFunctionParserRuleCall_2());
		}
		this_Function_2=ruleFunction
		{
			$current = $this_Function_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getObservableParserRuleCall_3());
		}
		this_Observable_3=ruleObservable
		{
			$current = $this_Observable_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getReactionParserRuleCall_4());
		}
		this_Reaction_4=ruleReaction
		{
			$current = $this_Reaction_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getStateEventParserRuleCall_5());
		}
		this_StateEvent_5=ruleStateEvent
		{
			$current = $this_StateEvent_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getTimeEventParserRuleCall_6());
		}
		this_TimeEvent_6=ruleTimeEvent
		{
			$current = $this_TimeEvent_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getLocaleParserRuleCall_7());
		}
		this_Locale_7=ruleLocale
		{
			$current = $this_Locale_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getSetLocaleParserRuleCall_8());
		}
		this_SetLocale_8=ruleSetLocale
		{
			$current = $this_SetLocale_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getJsonParserRuleCall_9());
		}
		this_Json_9=ruleJson
		{
			$current = $this_Json_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleSpecies
entryRuleSpecies returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpeciesRule()); }
	iv_ruleSpecies=ruleSpecies
	{ $current=$iv_ruleSpecies.current; }
	EOF;

// Rule Species
ruleSpecies returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(species'
		{
			newLeafNode(otherlv_0, grammarAccess.getSpeciesAccess().getSpeciesKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSpeciesAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpeciesRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_initialPopulation_2_0=RULE_NUMBER
				{
					newLeafNode(lv_initialPopulation_2_0, grammarAccess.getSpeciesAccess().getInitialPopulationNUMBERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpeciesRule());
					}
					setWithLastConsumed(
						$current,
						"initialPopulation",
						lv_initialPopulation_2_0,
						"org.idm.cms.emodl.Emodl.NUMBER");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSpeciesAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(param'
		{
			newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getParamKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_value_2_0=RULE_NUMBER
				{
					newLeafNode(lv_value_2_0, grammarAccess.getParameterAccess().getValueNUMBERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.idm.cms.emodl.Emodl.NUMBER");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFuncKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.idm.cms.emodl.Emodl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleObservable
entryRuleObservable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObservableRule()); }
	iv_ruleObservable=ruleObservable
	{ $current=$iv_ruleObservable.current; }
	EOF;

// Rule Observable
ruleObservable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(observe'
		{
			newLeafNode(otherlv_0, grammarAccess.getObservableAccess().getObserveKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObservableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObservableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObservableAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObservableRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.idm.cms.emodl.Emodl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getObservableAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleReaction
entryRuleReaction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionRule()); }
	iv_ruleReaction=ruleReaction
	{ $current=$iv_ruleReaction.current; }
	EOF;

// Rule Reaction
ruleReaction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(reaction'
		{
			newLeafNode(otherlv_0, grammarAccess.getReactionAccess().getReactionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getReactionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReactionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getReactionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReactionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getReactionAccess().getInputSpeciesSpeciesCrossReference_3_0());
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getReactionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getReactionAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReactionRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getReactionAccess().getOutputSpeciesSpeciesCrossReference_6_0());
				}
			)
		)*
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getReactionAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionAccess().getPropensityFunctionExpressionParserRuleCall_8_0());
				}
				lv_propensityFunction_8_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRule());
					}
					set(
						$current,
						"propensityFunction",
						lv_propensityFunction_8_0,
						"org.idm.cms.emodl.Emodl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getReactionAccess().getRightParenthesisKeyword_9());
		}
	)
;

// Entry rule entryRuleStateEvent
entryRuleStateEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateEventRule()); }
	iv_ruleStateEvent=ruleStateEvent
	{ $current=$iv_ruleStateEvent.current; }
	EOF;

// Rule StateEvent
ruleStateEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(state-event'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateEventAccess().getStateEventKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStateEventAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateEventRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStateEventAccess().getPredicateExpressionParserRuleCall_2_0());
				}
				lv_predicate_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateEventRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_2_0,
						"org.idm.cms.emodl.Emodl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStateEventAccess().getVariableValuePairsVariableValuePairsParserRuleCall_3_0());
				}
				lv_variableValuePairs_3_0=ruleVariableValuePairs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateEventRule());
					}
					set(
						$current,
						"variableValuePairs",
						lv_variableValuePairs_3_0,
						"org.idm.cms.emodl.Emodl.VariableValuePairs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getStateEventAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleTimeEvent
entryRuleTimeEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeEventRule()); }
	iv_ruleTimeEvent=ruleTimeEvent
	{ $current=$iv_ruleTimeEvent.current; }
	EOF;

// Rule TimeEvent
ruleTimeEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(time-event'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeEventAccess().getTimeEventKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTimeEventAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeEventRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_time_2_0=RULE_NUMBER
				{
					newLeafNode(lv_time_2_0, grammarAccess.getTimeEventAccess().getTimeNUMBERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeEventRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_2_0,
						"org.idm.cms.emodl.Emodl.NUMBER");
				}
			)
		)
		(
			(
				lv_iterations_3_0=RULE_INT
				{
					newLeafNode(lv_iterations_3_0, grammarAccess.getTimeEventAccess().getIterationsINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeEventRule());
					}
					setWithLastConsumed(
						$current,
						"iterations",
						lv_iterations_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeEventAccess().getVariableValuePairsVariableValuePairsParserRuleCall_4_0());
				}
				lv_variableValuePairs_4_0=ruleVariableValuePairs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeEventRule());
					}
					set(
						$current,
						"variableValuePairs",
						lv_variableValuePairs_4_0,
						"org.idm.cms.emodl.Emodl.VariableValuePairs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTimeEventAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleLocale
entryRuleLocale returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocaleRule()); }
	iv_ruleLocale=ruleLocale
	{ $current=$iv_ruleLocale.current; }
	EOF;

// Rule Locale
ruleLocale returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(locale'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocaleAccess().getLocaleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLocaleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocaleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getLocaleAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleSetLocale
entryRuleSetLocale returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetLocaleRule()); }
	iv_ruleSetLocale=ruleSetLocale
	{ $current=$iv_ruleSetLocale.current; }
	EOF;

// Rule SetLocale
ruleSetLocale returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(set-locale'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetLocaleAccess().getSetLocaleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSetLocaleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetLocaleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getSetLocaleAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleJson
entryRuleJson returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonRule()); }
	iv_ruleJson=ruleJson
	{ $current=$iv_ruleJson.current; }
	EOF;

// Rule Json
ruleJson returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='(json'
		{
			newLeafNode(otherlv_0, grammarAccess.getJsonAccess().getJsonKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getJsonAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJsonRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_file_2_0=RULE_STRING
				{
					newLeafNode(lv_file_2_0, grammarAccess.getJsonAccess().getFileSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJsonRule());
					}
					setWithLastConsumed(
						$current,
						"file",
						lv_file_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getJsonAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleVariableValuePairs
entryRuleVariableValuePairs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableValuePairsRule()); }
	iv_ruleVariableValuePairs=ruleVariableValuePairs
	{ $current=$iv_ruleVariableValuePairs.current; }
	EOF;

// Rule VariableValuePairs
ruleVariableValuePairs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableValuePairsAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableValuePairsAccess().getVariableValuePairsVariableValuePairParserRuleCall_1_0());
				}
				lv_variableValuePairs_1_0=ruleVariableValuePair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableValuePairsRule());
					}
					add(
						$current,
						"variableValuePairs",
						lv_variableValuePairs_1_0,
						"org.idm.cms.emodl.Emodl.VariableValuePair");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableValuePairsAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleVariableValuePair
entryRuleVariableValuePair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableValuePairRule()); }
	iv_ruleVariableValuePair=ruleVariableValuePair
	{ $current=$iv_ruleVariableValuePair.current; }
	EOF;

// Rule VariableValuePair
ruleVariableValuePair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableValuePairAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_variable_1_0=RULE_ID
				{
					newLeafNode(lv_variable_1_0, grammarAccess.getVariableValuePairAccess().getVariableIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableValuePairRule());
					}
					setWithLastConsumed(
						$current,
						"variable",
						lv_variable_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableValuePairAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableValuePairRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.idm.cms.emodl.Emodl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariableValuePairAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionAccess().getExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExpressionBinaryOperationParserRuleCall_0_1_0());
					}
					lv_expression_1_0=ruleBinaryOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_1_0,
							"org.idm.cms.emodl.Emodl.BinaryOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"org.idm.cms.emodl.Emodl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getNameLiteralParserRuleCall_2_0());
				}
				lv_name_5_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"name",
						lv_name_5_0,
						"org.idm.cms.emodl.Emodl.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinaryOperation
entryRuleBinaryOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOperationRule()); }
	iv_ruleBinaryOperation=ruleBinaryOperation
	{ $current=$iv_ruleBinaryOperation.current; }
	EOF;

// Rule BinaryOperation
ruleBinaryOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getBinaryOperationAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryOperationAccess().getOperatorBinaryOperatorParserRuleCall_1_0());
				}
				lv_operator_1_0=ruleBinaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"org.idm.cms.emodl.Emodl.BinaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryOperationAccess().getLeftExpressionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryOperationRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"org.idm.cms.emodl.Emodl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryOperationAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryOperationRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"org.idm.cms.emodl.Emodl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getBinaryOperationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current.getText(); }
	EOF;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getLiteralAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_NUMBER_1=RULE_NUMBER
		{
			$current.merge(this_NUMBER_1);
		}
		{
			newLeafNode(this_NUMBER_1, grammarAccess.getLiteralAccess().getNUMBERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleBinaryOperator
entryRuleBinaryOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOperatorRule()); }
	iv_ruleBinaryOperator=ruleBinaryOperator
	{ $current=$iv_ruleBinaryOperator.current.getText(); }
	EOF;

// Rule BinaryOperator
ruleBinaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getSolidusKeyword_3());
		}
		    |
		kw='^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getCircumflexAccentKeyword_4());
		}
		    |
		kw='min'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getMinKeyword_5());
		}
		    |
		kw='max'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getMaxKeyword_6());
		}
	)
;

RULE_NUMBER : '-'? RULE_INT ('.' RULE_INT)?;

RULE_INLINE_COMMENT : ('#'|';') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
