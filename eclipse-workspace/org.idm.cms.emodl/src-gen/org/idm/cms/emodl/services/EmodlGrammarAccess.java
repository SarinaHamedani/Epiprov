/*
 * generated by Xtext 2.37.0
 */
package org.idm.cms.emodl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EmodlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.EModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cStartModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartModelStartModelParserRuleCall_1_0 = (RuleCall)cStartModelAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cEndModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndModelEndModelParserRuleCall_3_0 = (RuleCall)cEndModelAssignment_3.eContents().get(0);
		
		//EModel:
		//    imports+=Import*
		//    startModel=StartModel
		//    elements+=Element*
		//    endModel=EndModel;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import*
		//startModel=StartModel
		//elements+=Element*
		//endModel=EndModel
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//startModel=StartModel
		public Assignment getStartModelAssignment_1() { return cStartModelAssignment_1; }
		
		//StartModel
		public RuleCall getStartModelStartModelParserRuleCall_1_0() { return cStartModelStartModelParserRuleCall_1_0; }
		
		//elements+=Element*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_2_0() { return cElementsElementParserRuleCall_2_0; }
		
		//endModel=EndModel
		public Assignment getEndModelAssignment_3() { return cEndModelAssignment_3; }
		
		//EndModel
		public RuleCall getEndModelEndModelParserRuleCall_3_0() { return cEndModelEndModelParserRuleCall_3_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cImportKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGroupsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGroupsImportGroupParserRuleCall_3_0 = (RuleCall)cGroupsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Import:
		//    {Import} '(' 'import' groups+=ImportGroup+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Import} '(' 'import' groups+=ImportGroup+ ')'
		public Group getGroup() { return cGroup; }
		
		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'import'
		public Keyword getImportKeyword_2() { return cImportKeyword_2; }
		
		//groups+=ImportGroup+
		public Assignment getGroupsAssignment_3() { return cGroupsAssignment_3; }
		
		//ImportGroup
		public RuleCall getGroupsImportGroupParserRuleCall_3_0() { return cGroupsImportGroupParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ImportGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.ImportGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsIDTerminalRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportGroup:
		//    '(' imports+=ID+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' imports+=ID+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//imports+=ID+
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//ID
		public RuleCall getImportsIDTerminalRuleCall_1_0() { return cImportsIDTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class StartModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.StartModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StartModel:
		//    '(start-model' name=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(start-model' name=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'(start-model'
		public Keyword getStartModelKeyword_0() { return cStartModelKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class EndModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.EndModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//EndModel:
		//    {EndModel} '(end-model)' name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//{EndModel} '(end-model)' name=ID?
		public Group getGroup() { return cGroup; }
		
		//{EndModel}
		public Action getEndModelAction_0() { return cEndModelAction_0; }
		
		//'(end-model)'
		public Keyword getEndModelKeyword_1() { return cEndModelKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpeciesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cObservableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReactionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStateEventParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTimeEventParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLocaleParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSetLocaleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cJsonParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Element hidden(INLINE_COMMENT, WS):
		//    Species | Parameter | Function | Observable | Reaction | StateEvent | TimeEvent | Locale | SetLocale | Json;
		@Override public ParserRule getRule() { return rule; }
		
		//Species | Parameter | Function | Observable | Reaction | StateEvent | TimeEvent | Locale | SetLocale | Json
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Species
		public RuleCall getSpeciesParserRuleCall_0() { return cSpeciesParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_2() { return cFunctionParserRuleCall_2; }
		
		//Observable
		public RuleCall getObservableParserRuleCall_3() { return cObservableParserRuleCall_3; }
		
		//Reaction
		public RuleCall getReactionParserRuleCall_4() { return cReactionParserRuleCall_4; }
		
		//StateEvent
		public RuleCall getStateEventParserRuleCall_5() { return cStateEventParserRuleCall_5; }
		
		//TimeEvent
		public RuleCall getTimeEventParserRuleCall_6() { return cTimeEventParserRuleCall_6; }
		
		//Locale
		public RuleCall getLocaleParserRuleCall_7() { return cLocaleParserRuleCall_7; }
		
		//SetLocale
		public RuleCall getSetLocaleParserRuleCall_8() { return cSetLocaleParserRuleCall_8; }
		
		//Json
		public RuleCall getJsonParserRuleCall_9() { return cJsonParserRuleCall_9; }
	}
	public class SpeciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Species");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpeciesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInitialPopulationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialPopulationNUMBERTerminalRuleCall_2_0 = (RuleCall)cInitialPopulationAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Species:
		//    '(species' name=ID initialPopulation=NUMBER ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(species' name=ID initialPopulation=NUMBER ')'
		public Group getGroup() { return cGroup; }
		
		//'(species'
		public Keyword getSpeciesKeyword_0() { return cSpeciesKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//initialPopulation=NUMBER
		public Assignment getInitialPopulationAssignment_2() { return cInitialPopulationAssignment_2; }
		
		//NUMBER
		public RuleCall getInitialPopulationNUMBERTerminalRuleCall_2_0() { return cInitialPopulationNUMBERTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNUMBERTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameter:
		//    '(param' name=ID value=NUMBER ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(param' name=ID value=NUMBER ')'
		public Group getGroup() { return cGroup; }
		
		//'(param'
		public Keyword getParamKeyword_0() { return cParamKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_2_0() { return cValueNUMBERTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Function:
		//    '(func' name=ID expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(func' name=ID expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'(func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ObservableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Observable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObserveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Observable:
		//    '(observe' name=ID expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(observe' name=ID expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'(observe'
		public Keyword getObserveKeyword_0() { return cObserveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReactionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputSpeciesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInputSpeciesSpeciesCrossReference_3_0 = (CrossReference)cInputSpeciesAssignment_3.eContents().get(0);
		private final RuleCall cInputSpeciesSpeciesIDTerminalRuleCall_3_0_1 = (RuleCall)cInputSpeciesSpeciesCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutputSpeciesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cOutputSpeciesSpeciesCrossReference_6_0 = (CrossReference)cOutputSpeciesAssignment_6.eContents().get(0);
		private final RuleCall cOutputSpeciesSpeciesIDTerminalRuleCall_6_0_1 = (RuleCall)cOutputSpeciesSpeciesCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPropensityFunctionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPropensityFunctionExpressionParserRuleCall_8_0 = (RuleCall)cPropensityFunctionAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Reaction:
		//    '(reaction' name=ID
		//        '(' inputSpecies+=[Species]* ')'
		//        '(' outputSpecies+=[Species]* ')'
		//        propensityFunction=Expression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(reaction' name=ID
		//    '(' inputSpecies+=[Species]* ')'
		//    '(' outputSpecies+=[Species]* ')'
		//    propensityFunction=Expression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'(reaction'
		public Keyword getReactionKeyword_0() { return cReactionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//inputSpecies+=[Species]*
		public Assignment getInputSpeciesAssignment_3() { return cInputSpeciesAssignment_3; }
		
		//[Species]
		public CrossReference getInputSpeciesSpeciesCrossReference_3_0() { return cInputSpeciesSpeciesCrossReference_3_0; }
		
		//ID
		public RuleCall getInputSpeciesSpeciesIDTerminalRuleCall_3_0_1() { return cInputSpeciesSpeciesIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//outputSpecies+=[Species]*
		public Assignment getOutputSpeciesAssignment_6() { return cOutputSpeciesAssignment_6; }
		
		//[Species]
		public CrossReference getOutputSpeciesSpeciesCrossReference_6_0() { return cOutputSpeciesSpeciesCrossReference_6_0; }
		
		//ID
		public RuleCall getOutputSpeciesSpeciesIDTerminalRuleCall_6_0_1() { return cOutputSpeciesSpeciesIDTerminalRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//propensityFunction=Expression
		public Assignment getPropensityFunctionAssignment_8() { return cPropensityFunctionAssignment_8; }
		
		//Expression
		public RuleCall getPropensityFunctionExpressionParserRuleCall_8_0() { return cPropensityFunctionExpressionParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class StateEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.StateEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateExpressionParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cVariableValuePairsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableValuePairsVariableValuePairsParserRuleCall_3_0 = (RuleCall)cVariableValuePairsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StateEvent:
		//    '(state-event' name=ID predicate=Expression variableValuePairs=VariableValuePairs ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(state-event' name=ID predicate=Expression variableValuePairs=VariableValuePairs ')'
		public Group getGroup() { return cGroup; }
		
		//'(state-event'
		public Keyword getStateEventKeyword_0() { return cStateEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//predicate=Expression
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//Expression
		public RuleCall getPredicateExpressionParserRuleCall_2_0() { return cPredicateExpressionParserRuleCall_2_0; }
		
		//variableValuePairs=VariableValuePairs
		public Assignment getVariableValuePairsAssignment_3() { return cVariableValuePairsAssignment_3; }
		
		//VariableValuePairs
		public RuleCall getVariableValuePairsVariableValuePairsParserRuleCall_3_0() { return cVariableValuePairsVariableValuePairsParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TimeEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.TimeEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeNUMBERTerminalRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Assignment cIterationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIterationsINTTerminalRuleCall_3_0 = (RuleCall)cIterationsAssignment_3.eContents().get(0);
		private final Assignment cVariableValuePairsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariableValuePairsVariableValuePairsParserRuleCall_4_0 = (RuleCall)cVariableValuePairsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TimeEvent:
		//    '(time-event' name=ID time=NUMBER (iterations=INT)? variableValuePairs=VariableValuePairs ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(time-event' name=ID time=NUMBER (iterations=INT)? variableValuePairs=VariableValuePairs ')'
		public Group getGroup() { return cGroup; }
		
		//'(time-event'
		public Keyword getTimeEventKeyword_0() { return cTimeEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//time=NUMBER
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }
		
		//NUMBER
		public RuleCall getTimeNUMBERTerminalRuleCall_2_0() { return cTimeNUMBERTerminalRuleCall_2_0; }
		
		//(iterations=INT)?
		public Assignment getIterationsAssignment_3() { return cIterationsAssignment_3; }
		
		//INT
		public RuleCall getIterationsINTTerminalRuleCall_3_0() { return cIterationsINTTerminalRuleCall_3_0; }
		
		//variableValuePairs=VariableValuePairs
		public Assignment getVariableValuePairsAssignment_4() { return cVariableValuePairsAssignment_4; }
		
		//VariableValuePairs
		public RuleCall getVariableValuePairsVariableValuePairsParserRuleCall_4_0() { return cVariableValuePairsVariableValuePairsParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class LocaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Locale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Locale:
		//    '(locale' name=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(locale' name=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'(locale'
		public Keyword getLocaleKeyword_0() { return cLocaleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class SetLocaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.SetLocale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetLocaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SetLocale:
		//    '(set-locale' name=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(set-locale' name=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'(set-locale'
		public Keyword getSetLocaleKeyword_0() { return cSetLocaleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class JsonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Json");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJsonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileSTRINGTerminalRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Json:
		//    '(json' name=ID file=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(json' name=ID file=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'(json'
		public Keyword getJsonKeyword_0() { return cJsonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//file=STRING
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_2_0() { return cFileSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VariableValuePairsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.VariableValuePairs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableValuePairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableValuePairsVariableValuePairParserRuleCall_1_0 = (RuleCall)cVariableValuePairsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VariableValuePairs:
		//    '(' (variableValuePairs+=VariableValuePair)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (variableValuePairs+=VariableValuePair)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(variableValuePairs+=VariableValuePair)+
		public Assignment getVariableValuePairsAssignment_1() { return cVariableValuePairsAssignment_1; }
		
		//VariableValuePair
		public RuleCall getVariableValuePairsVariableValuePairParserRuleCall_1_0() { return cVariableValuePairsVariableValuePairParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class VariableValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.VariableValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableValuePair:
		//    '(' variable=ID value=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' variable=ID value=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionBinaryOperationParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameLiteralParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Expression:
		//    {Expression} expression=BinaryOperation |  '(' expression=Expression ')'| name=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression} expression=BinaryOperation |  '(' expression=Expression ')'| name=Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Expression} expression=BinaryOperation
		public Group getGroup_0() { return cGroup_0; }
		
		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }
		
		//expression=BinaryOperation
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//BinaryOperation
		public RuleCall getExpressionBinaryOperationParserRuleCall_0_1_0() { return cExpressionBinaryOperationParserRuleCall_0_1_0; }
		
		//'(' expression=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//name=Literal
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Literal
		public RuleCall getNameLiteralParserRuleCall_2_0() { return cNameLiteralParserRuleCall_2_0; }
	}
	public class BinaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.BinaryOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorBinaryOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BinaryOperation returns Expression:
		//    '(' operator=BinaryOperator left=Expression right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' operator=BinaryOperator left=Expression right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operator=BinaryOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorParserRuleCall_1_0() { return cOperatorBinaryOperatorParserRuleCall_1_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//    ID | NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }
	}
	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCircumflexAccentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMinKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cMaxKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//BinaryOperator:
		//    '+' | '-' | '*' | '/' | '^' | 'min' | 'max';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/' | '^' | 'min' | 'max'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_4() { return cCircumflexAccentKeyword_4; }
		
		//'min'
		public Keyword getMinKeyword_5() { return cMinKeyword_5; }
		
		//'max'
		public Keyword getMaxKeyword_6() { return cMaxKeyword_6; }
	}
	
	
	private final EModelElements pEModel;
	private final ImportElements pImport;
	private final ImportGroupElements pImportGroup;
	private final StartModelElements pStartModel;
	private final EndModelElements pEndModel;
	private final ElementElements pElement;
	private final SpeciesElements pSpecies;
	private final ParameterElements pParameter;
	private final FunctionElements pFunction;
	private final ObservableElements pObservable;
	private final ReactionElements pReaction;
	private final StateEventElements pStateEvent;
	private final TimeEventElements pTimeEvent;
	private final LocaleElements pLocale;
	private final SetLocaleElements pSetLocale;
	private final JsonElements pJson;
	private final VariableValuePairsElements pVariableValuePairs;
	private final VariableValuePairElements pVariableValuePair;
	private final ExpressionElements pExpression;
	private final BinaryOperationElements pBinaryOperation;
	private final LiteralElements pLiteral;
	private final BinaryOperatorElements pBinaryOperator;
	private final TerminalRule tNUMBER;
	private final TerminalRule tINLINE_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EmodlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEModel = new EModelElements();
		this.pImport = new ImportElements();
		this.pImportGroup = new ImportGroupElements();
		this.pStartModel = new StartModelElements();
		this.pEndModel = new EndModelElements();
		this.pElement = new ElementElements();
		this.pSpecies = new SpeciesElements();
		this.pParameter = new ParameterElements();
		this.pFunction = new FunctionElements();
		this.pObservable = new ObservableElements();
		this.pReaction = new ReactionElements();
		this.pStateEvent = new StateEventElements();
		this.pTimeEvent = new TimeEventElements();
		this.pLocale = new LocaleElements();
		this.pSetLocale = new SetLocaleElements();
		this.pJson = new JsonElements();
		this.pVariableValuePairs = new VariableValuePairsElements();
		this.pVariableValuePair = new VariableValuePairElements();
		this.pExpression = new ExpressionElements();
		this.pBinaryOperation = new BinaryOperationElements();
		this.pLiteral = new LiteralElements();
		this.pBinaryOperator = new BinaryOperatorElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.NUMBER");
		this.tINLINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.idm.cms.emodl.Emodl.INLINE_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.idm.cms.emodl.Emodl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EModel:
	//    imports+=Import*
	//    startModel=StartModel
	//    elements+=Element*
	//    endModel=EndModel;
	public EModelElements getEModelAccess() {
		return pEModel;
	}
	
	public ParserRule getEModelRule() {
		return getEModelAccess().getRule();
	}
	
	//Import:
	//    {Import} '(' 'import' groups+=ImportGroup+ ')';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ImportGroup:
	//    '(' imports+=ID+ ')';
	public ImportGroupElements getImportGroupAccess() {
		return pImportGroup;
	}
	
	public ParserRule getImportGroupRule() {
		return getImportGroupAccess().getRule();
	}
	
	//StartModel:
	//    '(start-model' name=STRING ')';
	public StartModelElements getStartModelAccess() {
		return pStartModel;
	}
	
	public ParserRule getStartModelRule() {
		return getStartModelAccess().getRule();
	}
	
	//EndModel:
	//    {EndModel} '(end-model)' name=ID?;
	public EndModelElements getEndModelAccess() {
		return pEndModel;
	}
	
	public ParserRule getEndModelRule() {
		return getEndModelAccess().getRule();
	}
	
	//Element hidden(INLINE_COMMENT, WS):
	//    Species | Parameter | Function | Observable | Reaction | StateEvent | TimeEvent | Locale | SetLocale | Json;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Species:
	//    '(species' name=ID initialPopulation=NUMBER ')';
	public SpeciesElements getSpeciesAccess() {
		return pSpecies;
	}
	
	public ParserRule getSpeciesRule() {
		return getSpeciesAccess().getRule();
	}
	
	//Parameter:
	//    '(param' name=ID value=NUMBER ')';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Function:
	//    '(func' name=ID expression=Expression ')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Observable:
	//    '(observe' name=ID expression=Expression ')';
	public ObservableElements getObservableAccess() {
		return pObservable;
	}
	
	public ParserRule getObservableRule() {
		return getObservableAccess().getRule();
	}
	
	//Reaction:
	//    '(reaction' name=ID
	//        '(' inputSpecies+=[Species]* ')'
	//        '(' outputSpecies+=[Species]* ')'
	//        propensityFunction=Expression
	//    ')';
	public ReactionElements getReactionAccess() {
		return pReaction;
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}
	
	//StateEvent:
	//    '(state-event' name=ID predicate=Expression variableValuePairs=VariableValuePairs ')';
	public StateEventElements getStateEventAccess() {
		return pStateEvent;
	}
	
	public ParserRule getStateEventRule() {
		return getStateEventAccess().getRule();
	}
	
	//TimeEvent:
	//    '(time-event' name=ID time=NUMBER (iterations=INT)? variableValuePairs=VariableValuePairs ')';
	public TimeEventElements getTimeEventAccess() {
		return pTimeEvent;
	}
	
	public ParserRule getTimeEventRule() {
		return getTimeEventAccess().getRule();
	}
	
	//Locale:
	//    '(locale' name=ID ')';
	public LocaleElements getLocaleAccess() {
		return pLocale;
	}
	
	public ParserRule getLocaleRule() {
		return getLocaleAccess().getRule();
	}
	
	//SetLocale:
	//    '(set-locale' name=ID ')';
	public SetLocaleElements getSetLocaleAccess() {
		return pSetLocale;
	}
	
	public ParserRule getSetLocaleRule() {
		return getSetLocaleAccess().getRule();
	}
	
	//Json:
	//    '(json' name=ID file=STRING ')';
	public JsonElements getJsonAccess() {
		return pJson;
	}
	
	public ParserRule getJsonRule() {
		return getJsonAccess().getRule();
	}
	
	//VariableValuePairs:
	//    '(' (variableValuePairs+=VariableValuePair)+ ')';
	public VariableValuePairsElements getVariableValuePairsAccess() {
		return pVariableValuePairs;
	}
	
	public ParserRule getVariableValuePairsRule() {
		return getVariableValuePairsAccess().getRule();
	}
	
	//VariableValuePair:
	//    '(' variable=ID value=Expression ')';
	public VariableValuePairElements getVariableValuePairAccess() {
		return pVariableValuePair;
	}
	
	public ParserRule getVariableValuePairRule() {
		return getVariableValuePairAccess().getRule();
	}
	
	//Expression:
	//    {Expression} expression=BinaryOperation |  '(' expression=Expression ')'| name=Literal;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BinaryOperation returns Expression:
	//    '(' operator=BinaryOperator left=Expression right=Expression ')';
	public BinaryOperationElements getBinaryOperationAccess() {
		return pBinaryOperation;
	}
	
	public ParserRule getBinaryOperationRule() {
		return getBinaryOperationAccess().getRule();
	}
	
	//Literal:
	//    ID | NUMBER;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BinaryOperator:
	//    '+' | '-' | '*' | '/' | '^' | 'min' | 'max';
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return pBinaryOperator;
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}
	
	//terminal NUMBER returns ecore::EDouble:
	//    '-'? INT ('.' INT)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal INLINE_COMMENT:
	//    ('#'|';') !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getINLINE_COMMENTRule() {
		return tINLINE_COMMENT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
