/*
 * generated by Xtext 2.37.0
 */
package org.idm.cms.emodl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.idm.cms.emodl.emodl.EModel;
import org.idm.cms.emodl.emodl.EmodlPackage;
import org.idm.cms.emodl.emodl.EndModel;
import org.idm.cms.emodl.emodl.Expression;
import org.idm.cms.emodl.emodl.Function;
import org.idm.cms.emodl.emodl.Import;
import org.idm.cms.emodl.emodl.ImportGroup;
import org.idm.cms.emodl.emodl.Json;
import org.idm.cms.emodl.emodl.Locale;
import org.idm.cms.emodl.emodl.Observable;
import org.idm.cms.emodl.emodl.Reaction;
import org.idm.cms.emodl.emodl.SetLocale;
import org.idm.cms.emodl.emodl.Species;
import org.idm.cms.emodl.emodl.StartModel;
import org.idm.cms.emodl.emodl.StateEvent;
import org.idm.cms.emodl.emodl.TimeEvent;
import org.idm.cms.emodl.emodl.VariableValuePair;
import org.idm.cms.emodl.emodl.VariableValuePairs;
import org.idm.cms.emodl.services.EmodlGrammarAccess;

@SuppressWarnings("all")
public class EmodlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EmodlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EmodlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EmodlPackage.EMODEL:
				sequence_EModel(context, (EModel) semanticObject); 
				return; 
			case EmodlPackage.END_MODEL:
				sequence_EndModel(context, (EndModel) semanticObject); 
				return; 
			case EmodlPackage.EXPRESSION:
				if (rule == grammarAccess.getBinaryOperationRule()) {
					sequence_BinaryOperation(context, (Expression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExpressionRule()) {
					sequence_Expression(context, (Expression) semanticObject); 
					return; 
				}
				else break;
			case EmodlPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case EmodlPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case EmodlPackage.IMPORT_GROUP:
				sequence_ImportGroup(context, (ImportGroup) semanticObject); 
				return; 
			case EmodlPackage.JSON:
				sequence_Json(context, (Json) semanticObject); 
				return; 
			case EmodlPackage.LOCALE:
				sequence_Locale(context, (Locale) semanticObject); 
				return; 
			case EmodlPackage.OBSERVABLE:
				sequence_Observable(context, (Observable) semanticObject); 
				return; 
			case EmodlPackage.PARAMETER:
				sequence_Parameter(context, (org.idm.cms.emodl.emodl.Parameter) semanticObject); 
				return; 
			case EmodlPackage.REACTION:
				sequence_Reaction(context, (Reaction) semanticObject); 
				return; 
			case EmodlPackage.SET_LOCALE:
				sequence_SetLocale(context, (SetLocale) semanticObject); 
				return; 
			case EmodlPackage.SPECIES:
				sequence_Species(context, (Species) semanticObject); 
				return; 
			case EmodlPackage.START_MODEL:
				sequence_StartModel(context, (StartModel) semanticObject); 
				return; 
			case EmodlPackage.STATE_EVENT:
				sequence_StateEvent(context, (StateEvent) semanticObject); 
				return; 
			case EmodlPackage.TIME_EVENT:
				sequence_TimeEvent(context, (TimeEvent) semanticObject); 
				return; 
			case EmodlPackage.VARIABLE_VALUE_PAIR:
				sequence_VariableValuePair(context, (VariableValuePair) semanticObject); 
				return; 
			case EmodlPackage.VARIABLE_VALUE_PAIRS:
				sequence_VariableValuePairs(context, (VariableValuePairs) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     BinaryOperation returns Expression
	 *
	 * Constraint:
	 *     (operator=BinaryOperator left=Expression right=Expression)
	 * </pre>
	 */
	protected void sequence_BinaryOperation(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinaryOperationAccess().getOperatorBinaryOperatorParserRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getBinaryOperationAccess().getLeftExpressionParserRuleCall_2_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getBinaryOperationAccess().getRightExpressionParserRuleCall_3_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EModel returns EModel
	 *
	 * Constraint:
	 *     (imports+=Import* startModel=StartModel elements+=Element* endModel=EndModel)
	 * </pre>
	 */
	protected void sequence_EModel(ISerializationContext context, EModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EndModel returns EndModel
	 *
	 * Constraint:
	 *     name=ID?
	 * </pre>
	 */
	protected void sequence_EndModel(ISerializationContext context, EndModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (expression=BinaryOperation | expression=Expression | name=Literal)
	 * </pre>
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Function
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=ID expression=Expression)
	 * </pre>
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.FUNCTION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.FUNCTION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFunctionAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImportGroup returns ImportGroup
	 *
	 * Constraint:
	 *     imports+=ID+
	 * </pre>
	 */
	protected void sequence_ImportGroup(ISerializationContext context, ImportGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     groups+=ImportGroup+
	 * </pre>
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Json
	 *     Json returns Json
	 *
	 * Constraint:
	 *     (name=ID file=STRING)
	 * </pre>
	 */
	protected void sequence_Json(ISerializationContext context, Json semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.JSON__FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.JSON__FILE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJsonAccess().getFileSTRINGTerminalRuleCall_2_0(), semanticObject.getFile());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Locale
	 *     Locale returns Locale
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Locale(ISerializationContext context, Locale semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocaleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Observable
	 *     Observable returns Observable
	 *
	 * Constraint:
	 *     (name=ID expression=Expression)
	 * </pre>
	 */
	protected void sequence_Observable(ISerializationContext context, Observable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.OBSERVABLE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.OBSERVABLE__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObservableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObservableAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Parameter
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=ID value=NUMBER)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, org.idm.cms.emodl.emodl.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getValueNUMBERTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Reaction
	 *     Reaction returns Reaction
	 *
	 * Constraint:
	 *     (name=ID inputSpecies+=[Species|ID]* outputSpecies+=[Species|ID]* propensityFunction=Expression)
	 * </pre>
	 */
	protected void sequence_Reaction(ISerializationContext context, Reaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns SetLocale
	 *     SetLocale returns SetLocale
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_SetLocale(ISerializationContext context, SetLocale semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSetLocaleAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Species
	 *     Species returns Species
	 *
	 * Constraint:
	 *     (name=ID initialPopulation=NUMBER)
	 * </pre>
	 */
	protected void sequence_Species(ISerializationContext context, Species semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.SPECIES__INITIAL_POPULATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.SPECIES__INITIAL_POPULATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSpeciesAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSpeciesAccess().getInitialPopulationNUMBERTerminalRuleCall_2_0(), semanticObject.getInitialPopulation());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StartModel returns StartModel
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_StartModel(ISerializationContext context, StartModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.START_MODEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.START_MODEL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStartModelAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns StateEvent
	 *     StateEvent returns StateEvent
	 *
	 * Constraint:
	 *     (name=ID predicate=Expression variableValuePairs=VariableValuePairs)
	 * </pre>
	 */
	protected void sequence_StateEvent(ISerializationContext context, StateEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.STATE_EVENT__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.STATE_EVENT__PREDICATE));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.STATE_EVENT__VARIABLE_VALUE_PAIRS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.STATE_EVENT__VARIABLE_VALUE_PAIRS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStateEventAccess().getPredicateExpressionParserRuleCall_2_0(), semanticObject.getPredicate());
		feeder.accept(grammarAccess.getStateEventAccess().getVariableValuePairsVariableValuePairsParserRuleCall_3_0(), semanticObject.getVariableValuePairs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns TimeEvent
	 *     TimeEvent returns TimeEvent
	 *
	 * Constraint:
	 *     (name=ID time=NUMBER iterations=INT? variableValuePairs=VariableValuePairs)
	 * </pre>
	 */
	protected void sequence_TimeEvent(ISerializationContext context, TimeEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableValuePair returns VariableValuePair
	 *
	 * Constraint:
	 *     (variable=ID value=Expression)
	 * </pre>
	 */
	protected void sequence_VariableValuePair(ISerializationContext context, VariableValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.VARIABLE_VALUE_PAIR__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.VARIABLE_VALUE_PAIR__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, EmodlPackage.Literals.VARIABLE_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EmodlPackage.Literals.VARIABLE_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableValuePairAccess().getVariableIDTerminalRuleCall_1_0(), semanticObject.getVariable());
		feeder.accept(grammarAccess.getVariableValuePairAccess().getValueExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableValuePairs returns VariableValuePairs
	 *
	 * Constraint:
	 *     variableValuePairs+=VariableValuePair+
	 * </pre>
	 */
	protected void sequence_VariableValuePairs(ISerializationContext context, VariableValuePairs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
