/*
 * generated by Xtext 2.37.0
 */
package org.xtext.geodes.trustdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.geodes.trustdsl.services.TrustDSLGrammarAccess;
import org.xtext.geodes.trustdsl.trustDSL.Agent;
import org.xtext.geodes.trustdsl.trustDSL.Belief;
import org.xtext.geodes.trustdsl.trustDSL.SBoolean;
import org.xtext.geodes.trustdsl.trustDSL.TrustDSLPackage;
import org.xtext.geodes.trustdsl.trustDSL.TrustModel;
import org.xtext.geodes.trustdsl.trustDSL.UncertainElement;
import org.xtext.geodes.trustdsl.trustDSL.UncertainElementFusion;

@SuppressWarnings("all")
public class TrustDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TrustDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TrustDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TrustDSLPackage.AGENT:
				sequence_Agent(context, (Agent) semanticObject); 
				return; 
			case TrustDSLPackage.BELIEF:
				sequence_Belief(context, (Belief) semanticObject); 
				return; 
			case TrustDSLPackage.SBOOLEAN:
				sequence_SBoolean(context, (SBoolean) semanticObject); 
				return; 
			case TrustDSLPackage.TRUST_MODEL:
				sequence_TrustModel(context, (TrustModel) semanticObject); 
				return; 
			case TrustDSLPackage.UNCERTAIN_ELEMENT:
				sequence_UncertainElement(context, (UncertainElement) semanticObject); 
				return; 
			case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION:
				sequence_UncertainElementFusion(context, (UncertainElementFusion) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Agent
	 *     Agent returns Agent
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Agent(ISerializationContext context, Agent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TrustDSLPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrustDSLPackage.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAgentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Belief
	 *     Belief returns Belief
	 *
	 * Constraint:
	 *     (name=ID agent=[Agent|ID] opinion=SBoolean)
	 * </pre>
	 */
	protected void sequence_Belief(ISerializationContext context, Belief semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TrustDSLPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrustDSLPackage.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, TrustDSLPackage.Literals.BELIEF__AGENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrustDSLPackage.Literals.BELIEF__AGENT));
			if (transientValues.isValueTransient(semanticObject, TrustDSLPackage.Literals.BELIEF__OPINION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrustDSLPackage.Literals.BELIEF__OPINION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBeliefAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBeliefAccess().getAgentAgentIDTerminalRuleCall_3_0_1(), semanticObject.eGet(TrustDSLPackage.Literals.BELIEF__AGENT, false));
		feeder.accept(grammarAccess.getBeliefAccess().getOpinionSBooleanParserRuleCall_5_0(), semanticObject.getOpinion());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SBoolean returns SBoolean
	 *
	 * Constraint:
	 *     (belief=REAL disbelief=REAL uncertainty=REAL baseRate=REAL)
	 * </pre>
	 */
	protected void sequence_SBoolean(ISerializationContext context, SBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TrustDSLPackage.Literals.SBOOLEAN__BELIEF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrustDSLPackage.Literals.SBOOLEAN__BELIEF));
			if (transientValues.isValueTransient(semanticObject, TrustDSLPackage.Literals.SBOOLEAN__DISBELIEF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrustDSLPackage.Literals.SBOOLEAN__DISBELIEF));
			if (transientValues.isValueTransient(semanticObject, TrustDSLPackage.Literals.SBOOLEAN__UNCERTAINTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrustDSLPackage.Literals.SBOOLEAN__UNCERTAINTY));
			if (transientValues.isValueTransient(semanticObject, TrustDSLPackage.Literals.SBOOLEAN__BASE_RATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TrustDSLPackage.Literals.SBOOLEAN__BASE_RATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSBooleanAccess().getBeliefREALParserRuleCall_1_0(), semanticObject.getBelief());
		feeder.accept(grammarAccess.getSBooleanAccess().getDisbeliefREALParserRuleCall_3_0(), semanticObject.getDisbelief());
		feeder.accept(grammarAccess.getSBooleanAccess().getUncertaintyREALParserRuleCall_5_0(), semanticObject.getUncertainty());
		feeder.accept(grammarAccess.getSBooleanAccess().getBaseRateREALParserRuleCall_7_0(), semanticObject.getBaseRate());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TrustModel returns TrustModel
	 *
	 * Constraint:
	 *     elements+=Element+
	 * </pre>
	 */
	protected void sequence_TrustModel(ISerializationContext context, TrustModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns UncertainElementFusion
	 *     UncertainElementFusion returns UncertainElementFusion
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         beliefs+=Belief 
	 *         beliefs+=Belief* 
	 *         aleatoryCumulativeBF=SBoolean 
	 *         averageingBF=SBoolean 
	 *         beliefConstraintFusion=SBoolean 
	 *         epistemicCumulativeBF=SBoolean 
	 *         weightedBF=SBoolean
	 *     )
	 * </pre>
	 */
	protected void sequence_UncertainElementFusion(ISerializationContext context, UncertainElementFusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns UncertainElement
	 *     UncertainElement returns UncertainElement
	 *
	 * Constraint:
	 *     (name=ID beliefs+=Belief beliefs+=Belief*)
	 * </pre>
	 */
	protected void sequence_UncertainElement(ISerializationContext context, UncertainElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
