/**
 * generated by Xtext 2.37.0
 */
package org.xtext.geodes.trustdsl.trustDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.geodes.trustdsl.trustDSL.Belief;
import org.xtext.geodes.trustdsl.trustDSL.SBoolean;
import org.xtext.geodes.trustdsl.trustDSL.TrustDSLPackage;
import org.xtext.geodes.trustdsl.trustDSL.UncertainElementFusion;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Uncertain Element Fusion</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.geodes.trustdsl.trustDSL.impl.UncertainElementFusionImpl#getBeliefs <em>Beliefs</em>}</li>
 *   <li>{@link org.xtext.geodes.trustdsl.trustDSL.impl.UncertainElementFusionImpl#getAleatoryCumulativeBF <em>Aleatory Cumulative BF</em>}</li>
 *   <li>{@link org.xtext.geodes.trustdsl.trustDSL.impl.UncertainElementFusionImpl#getAverageingBF <em>Averageing BF</em>}</li>
 *   <li>{@link org.xtext.geodes.trustdsl.trustDSL.impl.UncertainElementFusionImpl#getBeliefConstraintFusion <em>Belief Constraint Fusion</em>}</li>
 *   <li>{@link org.xtext.geodes.trustdsl.trustDSL.impl.UncertainElementFusionImpl#getConsensusCompromiseBF <em>Consensus Compromise BF</em>}</li>
 *   <li>{@link org.xtext.geodes.trustdsl.trustDSL.impl.UncertainElementFusionImpl#getEpistemicCumulativeBF <em>Epistemic Cumulative BF</em>}</li>
 *   <li>{@link org.xtext.geodes.trustdsl.trustDSL.impl.UncertainElementFusionImpl#getWeightedBF <em>Weighted BF</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UncertainElementFusionImpl extends ElementImpl implements UncertainElementFusion
{
  /**
   * The cached value of the '{@link #getBeliefs() <em>Beliefs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBeliefs()
   * @generated
   * @ordered
   */
  protected EList<Belief> beliefs;

  /**
   * The cached value of the '{@link #getAleatoryCumulativeBF() <em>Aleatory Cumulative BF</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAleatoryCumulativeBF()
   * @generated
   * @ordered
   */
  protected SBoolean aleatoryCumulativeBF;

  /**
   * The cached value of the '{@link #getAverageingBF() <em>Averageing BF</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAverageingBF()
   * @generated
   * @ordered
   */
  protected SBoolean averageingBF;

  /**
   * The cached value of the '{@link #getBeliefConstraintFusion() <em>Belief Constraint Fusion</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBeliefConstraintFusion()
   * @generated
   * @ordered
   */
  protected SBoolean beliefConstraintFusion;

  /**
   * The cached value of the '{@link #getConsensusCompromiseBF() <em>Consensus Compromise BF</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsensusCompromiseBF()
   * @generated
   * @ordered
   */
  protected SBoolean consensusCompromiseBF;

  /**
   * The cached value of the '{@link #getEpistemicCumulativeBF() <em>Epistemic Cumulative BF</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEpistemicCumulativeBF()
   * @generated
   * @ordered
   */
  protected SBoolean epistemicCumulativeBF;

  /**
   * The cached value of the '{@link #getWeightedBF() <em>Weighted BF</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWeightedBF()
   * @generated
   * @ordered
   */
  protected SBoolean weightedBF;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UncertainElementFusionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TrustDSLPackage.Literals.UNCERTAIN_ELEMENT_FUSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Belief> getBeliefs()
  {
    if (beliefs == null)
    {
      beliefs = new EObjectContainmentEList<Belief>(Belief.class, this, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEFS);
    }
    return beliefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SBoolean getAleatoryCumulativeBF()
  {
    return aleatoryCumulativeBF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAleatoryCumulativeBF(SBoolean newAleatoryCumulativeBF, NotificationChain msgs)
  {
    SBoolean oldAleatoryCumulativeBF = aleatoryCumulativeBF;
    aleatoryCumulativeBF = newAleatoryCumulativeBF;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__ALEATORY_CUMULATIVE_BF, oldAleatoryCumulativeBF, newAleatoryCumulativeBF);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAleatoryCumulativeBF(SBoolean newAleatoryCumulativeBF)
  {
    if (newAleatoryCumulativeBF != aleatoryCumulativeBF)
    {
      NotificationChain msgs = null;
      if (aleatoryCumulativeBF != null)
        msgs = ((InternalEObject)aleatoryCumulativeBF).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__ALEATORY_CUMULATIVE_BF, null, msgs);
      if (newAleatoryCumulativeBF != null)
        msgs = ((InternalEObject)newAleatoryCumulativeBF).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__ALEATORY_CUMULATIVE_BF, null, msgs);
      msgs = basicSetAleatoryCumulativeBF(newAleatoryCumulativeBF, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__ALEATORY_CUMULATIVE_BF, newAleatoryCumulativeBF, newAleatoryCumulativeBF));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SBoolean getAverageingBF()
  {
    return averageingBF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAverageingBF(SBoolean newAverageingBF, NotificationChain msgs)
  {
    SBoolean oldAverageingBF = averageingBF;
    averageingBF = newAverageingBF;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__AVERAGEING_BF, oldAverageingBF, newAverageingBF);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAverageingBF(SBoolean newAverageingBF)
  {
    if (newAverageingBF != averageingBF)
    {
      NotificationChain msgs = null;
      if (averageingBF != null)
        msgs = ((InternalEObject)averageingBF).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__AVERAGEING_BF, null, msgs);
      if (newAverageingBF != null)
        msgs = ((InternalEObject)newAverageingBF).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__AVERAGEING_BF, null, msgs);
      msgs = basicSetAverageingBF(newAverageingBF, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__AVERAGEING_BF, newAverageingBF, newAverageingBF));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SBoolean getBeliefConstraintFusion()
  {
    return beliefConstraintFusion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBeliefConstraintFusion(SBoolean newBeliefConstraintFusion, NotificationChain msgs)
  {
    SBoolean oldBeliefConstraintFusion = beliefConstraintFusion;
    beliefConstraintFusion = newBeliefConstraintFusion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEF_CONSTRAINT_FUSION, oldBeliefConstraintFusion, newBeliefConstraintFusion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBeliefConstraintFusion(SBoolean newBeliefConstraintFusion)
  {
    if (newBeliefConstraintFusion != beliefConstraintFusion)
    {
      NotificationChain msgs = null;
      if (beliefConstraintFusion != null)
        msgs = ((InternalEObject)beliefConstraintFusion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEF_CONSTRAINT_FUSION, null, msgs);
      if (newBeliefConstraintFusion != null)
        msgs = ((InternalEObject)newBeliefConstraintFusion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEF_CONSTRAINT_FUSION, null, msgs);
      msgs = basicSetBeliefConstraintFusion(newBeliefConstraintFusion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEF_CONSTRAINT_FUSION, newBeliefConstraintFusion, newBeliefConstraintFusion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SBoolean getConsensusCompromiseBF()
  {
    return consensusCompromiseBF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConsensusCompromiseBF(SBoolean newConsensusCompromiseBF, NotificationChain msgs)
  {
    SBoolean oldConsensusCompromiseBF = consensusCompromiseBF;
    consensusCompromiseBF = newConsensusCompromiseBF;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__CONSENSUS_COMPROMISE_BF, oldConsensusCompromiseBF, newConsensusCompromiseBF);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConsensusCompromiseBF(SBoolean newConsensusCompromiseBF)
  {
    if (newConsensusCompromiseBF != consensusCompromiseBF)
    {
      NotificationChain msgs = null;
      if (consensusCompromiseBF != null)
        msgs = ((InternalEObject)consensusCompromiseBF).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__CONSENSUS_COMPROMISE_BF, null, msgs);
      if (newConsensusCompromiseBF != null)
        msgs = ((InternalEObject)newConsensusCompromiseBF).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__CONSENSUS_COMPROMISE_BF, null, msgs);
      msgs = basicSetConsensusCompromiseBF(newConsensusCompromiseBF, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__CONSENSUS_COMPROMISE_BF, newConsensusCompromiseBF, newConsensusCompromiseBF));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SBoolean getEpistemicCumulativeBF()
  {
    return epistemicCumulativeBF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEpistemicCumulativeBF(SBoolean newEpistemicCumulativeBF, NotificationChain msgs)
  {
    SBoolean oldEpistemicCumulativeBF = epistemicCumulativeBF;
    epistemicCumulativeBF = newEpistemicCumulativeBF;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__EPISTEMIC_CUMULATIVE_BF, oldEpistemicCumulativeBF, newEpistemicCumulativeBF);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEpistemicCumulativeBF(SBoolean newEpistemicCumulativeBF)
  {
    if (newEpistemicCumulativeBF != epistemicCumulativeBF)
    {
      NotificationChain msgs = null;
      if (epistemicCumulativeBF != null)
        msgs = ((InternalEObject)epistemicCumulativeBF).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__EPISTEMIC_CUMULATIVE_BF, null, msgs);
      if (newEpistemicCumulativeBF != null)
        msgs = ((InternalEObject)newEpistemicCumulativeBF).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__EPISTEMIC_CUMULATIVE_BF, null, msgs);
      msgs = basicSetEpistemicCumulativeBF(newEpistemicCumulativeBF, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__EPISTEMIC_CUMULATIVE_BF, newEpistemicCumulativeBF, newEpistemicCumulativeBF));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SBoolean getWeightedBF()
  {
    return weightedBF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWeightedBF(SBoolean newWeightedBF, NotificationChain msgs)
  {
    SBoolean oldWeightedBF = weightedBF;
    weightedBF = newWeightedBF;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__WEIGHTED_BF, oldWeightedBF, newWeightedBF);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWeightedBF(SBoolean newWeightedBF)
  {
    if (newWeightedBF != weightedBF)
    {
      NotificationChain msgs = null;
      if (weightedBF != null)
        msgs = ((InternalEObject)weightedBF).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__WEIGHTED_BF, null, msgs);
      if (newWeightedBF != null)
        msgs = ((InternalEObject)newWeightedBF).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__WEIGHTED_BF, null, msgs);
      msgs = basicSetWeightedBF(newWeightedBF, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__WEIGHTED_BF, newWeightedBF, newWeightedBF));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEFS:
        return ((InternalEList<?>)getBeliefs()).basicRemove(otherEnd, msgs);
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__ALEATORY_CUMULATIVE_BF:
        return basicSetAleatoryCumulativeBF(null, msgs);
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__AVERAGEING_BF:
        return basicSetAverageingBF(null, msgs);
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEF_CONSTRAINT_FUSION:
        return basicSetBeliefConstraintFusion(null, msgs);
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__CONSENSUS_COMPROMISE_BF:
        return basicSetConsensusCompromiseBF(null, msgs);
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__EPISTEMIC_CUMULATIVE_BF:
        return basicSetEpistemicCumulativeBF(null, msgs);
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__WEIGHTED_BF:
        return basicSetWeightedBF(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEFS:
        return getBeliefs();
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__ALEATORY_CUMULATIVE_BF:
        return getAleatoryCumulativeBF();
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__AVERAGEING_BF:
        return getAverageingBF();
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEF_CONSTRAINT_FUSION:
        return getBeliefConstraintFusion();
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__CONSENSUS_COMPROMISE_BF:
        return getConsensusCompromiseBF();
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__EPISTEMIC_CUMULATIVE_BF:
        return getEpistemicCumulativeBF();
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__WEIGHTED_BF:
        return getWeightedBF();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEFS:
        getBeliefs().clear();
        getBeliefs().addAll((Collection<? extends Belief>)newValue);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__ALEATORY_CUMULATIVE_BF:
        setAleatoryCumulativeBF((SBoolean)newValue);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__AVERAGEING_BF:
        setAverageingBF((SBoolean)newValue);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEF_CONSTRAINT_FUSION:
        setBeliefConstraintFusion((SBoolean)newValue);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__CONSENSUS_COMPROMISE_BF:
        setConsensusCompromiseBF((SBoolean)newValue);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__EPISTEMIC_CUMULATIVE_BF:
        setEpistemicCumulativeBF((SBoolean)newValue);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__WEIGHTED_BF:
        setWeightedBF((SBoolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEFS:
        getBeliefs().clear();
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__ALEATORY_CUMULATIVE_BF:
        setAleatoryCumulativeBF((SBoolean)null);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__AVERAGEING_BF:
        setAverageingBF((SBoolean)null);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEF_CONSTRAINT_FUSION:
        setBeliefConstraintFusion((SBoolean)null);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__CONSENSUS_COMPROMISE_BF:
        setConsensusCompromiseBF((SBoolean)null);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__EPISTEMIC_CUMULATIVE_BF:
        setEpistemicCumulativeBF((SBoolean)null);
        return;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__WEIGHTED_BF:
        setWeightedBF((SBoolean)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEFS:
        return beliefs != null && !beliefs.isEmpty();
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__ALEATORY_CUMULATIVE_BF:
        return aleatoryCumulativeBF != null;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__AVERAGEING_BF:
        return averageingBF != null;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__BELIEF_CONSTRAINT_FUSION:
        return beliefConstraintFusion != null;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__CONSENSUS_COMPROMISE_BF:
        return consensusCompromiseBF != null;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__EPISTEMIC_CUMULATIVE_BF:
        return epistemicCumulativeBF != null;
      case TrustDSLPackage.UNCERTAIN_ELEMENT_FUSION__WEIGHTED_BF:
        return weightedBF != null;
    }
    return super.eIsSet(featureID);
  }

} //UncertainElementFusionImpl
