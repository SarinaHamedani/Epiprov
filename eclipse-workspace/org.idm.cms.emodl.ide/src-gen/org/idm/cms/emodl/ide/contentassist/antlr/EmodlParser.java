/*
 * generated by Xtext 2.37.0
 */
package org.idm.cms.emodl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.idm.cms.emodl.ide.contentassist.antlr.internal.InternalEmodlParser;
import org.idm.cms.emodl.services.EmodlGrammarAccess;

public class EmodlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(EmodlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, EmodlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBinaryOperatorAccess().getAlternatives(), "rule__BinaryOperator__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getImportGroupAccess().getGroup(), "rule__ImportGroup__Group__0");
			builder.put(grammarAccess.getStartModelAccess().getGroup(), "rule__StartModel__Group__0");
			builder.put(grammarAccess.getSpeciesAccess().getGroup(), "rule__Species__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getObservableAccess().getGroup(), "rule__Observable__Group__0");
			builder.put(grammarAccess.getReactionAccess().getGroup(), "rule__Reaction__Group__0");
			builder.put(grammarAccess.getStateEventAccess().getGroup(), "rule__StateEvent__Group__0");
			builder.put(grammarAccess.getTimeEventAccess().getGroup(), "rule__TimeEvent__Group__0");
			builder.put(grammarAccess.getLocaleAccess().getGroup(), "rule__Locale__Group__0");
			builder.put(grammarAccess.getSetLocaleAccess().getGroup(), "rule__SetLocale__Group__0");
			builder.put(grammarAccess.getJsonAccess().getGroup(), "rule__Json__Group__0");
			builder.put(grammarAccess.getVariableValuePairsAccess().getGroup(), "rule__VariableValuePairs__Group__0");
			builder.put(grammarAccess.getVariableValuePairAccess().getGroup(), "rule__VariableValuePair__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getBinaryOperationAccess().getGroup(), "rule__BinaryOperation__Group__0");
			builder.put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getStartModelAssignment_1(), "rule__Model__StartModelAssignment_1");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment_2(), "rule__Model__ElementsAssignment_2");
			builder.put(grammarAccess.getModelAccess().getEndModelAssignment_3(), "rule__Model__EndModelAssignment_3");
			builder.put(grammarAccess.getImportAccess().getGroupsAssignment_3(), "rule__Import__GroupsAssignment_3");
			builder.put(grammarAccess.getImportGroupAccess().getImportsAssignment_1(), "rule__ImportGroup__ImportsAssignment_1");
			builder.put(grammarAccess.getStartModelAccess().getNameAssignment_1(), "rule__StartModel__NameAssignment_1");
			builder.put(grammarAccess.getSpeciesAccess().getNameAssignment_1(), "rule__Species__NameAssignment_1");
			builder.put(grammarAccess.getSpeciesAccess().getInitialPopulationAssignment_2(), "rule__Species__InitialPopulationAssignment_2");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getValueAssignment_2(), "rule__Parameter__ValueAssignment_2");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getExpressionAssignment_2(), "rule__Function__ExpressionAssignment_2");
			builder.put(grammarAccess.getObservableAccess().getNameAssignment_1(), "rule__Observable__NameAssignment_1");
			builder.put(grammarAccess.getObservableAccess().getExpressionAssignment_2(), "rule__Observable__ExpressionAssignment_2");
			builder.put(grammarAccess.getReactionAccess().getNameAssignment_1(), "rule__Reaction__NameAssignment_1");
			builder.put(grammarAccess.getReactionAccess().getInputSpeciesAssignment_3(), "rule__Reaction__InputSpeciesAssignment_3");
			builder.put(grammarAccess.getReactionAccess().getOutputSpeciesAssignment_6(), "rule__Reaction__OutputSpeciesAssignment_6");
			builder.put(grammarAccess.getReactionAccess().getPropensityFunctionAssignment_8(), "rule__Reaction__PropensityFunctionAssignment_8");
			builder.put(grammarAccess.getStateEventAccess().getNameAssignment_1(), "rule__StateEvent__NameAssignment_1");
			builder.put(grammarAccess.getStateEventAccess().getPredicateAssignment_2(), "rule__StateEvent__PredicateAssignment_2");
			builder.put(grammarAccess.getStateEventAccess().getVariableValuePairsAssignment_3(), "rule__StateEvent__VariableValuePairsAssignment_3");
			builder.put(grammarAccess.getTimeEventAccess().getNameAssignment_1(), "rule__TimeEvent__NameAssignment_1");
			builder.put(grammarAccess.getTimeEventAccess().getTimeAssignment_2(), "rule__TimeEvent__TimeAssignment_2");
			builder.put(grammarAccess.getTimeEventAccess().getIterationsAssignment_3(), "rule__TimeEvent__IterationsAssignment_3");
			builder.put(grammarAccess.getTimeEventAccess().getVariableValuePairsAssignment_4(), "rule__TimeEvent__VariableValuePairsAssignment_4");
			builder.put(grammarAccess.getLocaleAccess().getNameAssignment_1(), "rule__Locale__NameAssignment_1");
			builder.put(grammarAccess.getSetLocaleAccess().getNameAssignment_1(), "rule__SetLocale__NameAssignment_1");
			builder.put(grammarAccess.getJsonAccess().getNameAssignment_1(), "rule__Json__NameAssignment_1");
			builder.put(grammarAccess.getJsonAccess().getFileAssignment_2(), "rule__Json__FileAssignment_2");
			builder.put(grammarAccess.getVariableValuePairsAccess().getVariableValuePairsAssignment_1(), "rule__VariableValuePairs__VariableValuePairsAssignment_1");
			builder.put(grammarAccess.getVariableValuePairAccess().getVariableAssignment_1(), "rule__VariableValuePair__VariableAssignment_1");
			builder.put(grammarAccess.getVariableValuePairAccess().getValueAssignment_2(), "rule__VariableValuePair__ValueAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getExpressionAssignment_0_1(), "rule__Expression__ExpressionAssignment_0_1");
			builder.put(grammarAccess.getExpressionAccess().getExpressionAssignment_1_1(), "rule__Expression__ExpressionAssignment_1_1");
			builder.put(grammarAccess.getExpressionAccess().getNameAssignment_2(), "rule__Expression__NameAssignment_2");
			builder.put(grammarAccess.getBinaryOperationAccess().getOperatorAssignment_1(), "rule__BinaryOperation__OperatorAssignment_1");
			builder.put(grammarAccess.getBinaryOperationAccess().getLeftAssignment_2(), "rule__BinaryOperation__LeftAssignment_2");
			builder.put(grammarAccess.getBinaryOperationAccess().getRightAssignment_3(), "rule__BinaryOperation__RightAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private EmodlGrammarAccess grammarAccess;

	@Override
	protected InternalEmodlParser createParser() {
		InternalEmodlParser result = new InternalEmodlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EmodlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EmodlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
