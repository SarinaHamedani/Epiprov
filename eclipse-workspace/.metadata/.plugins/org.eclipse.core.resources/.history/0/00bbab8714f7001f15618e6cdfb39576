/*
 * generated by Xtext 2.37.0
 */
package org.w3.ns.prov.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.w3.ns.prov.provN.Entity
import org.w3.ns.prov.provN.Document

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */

class ProvNGenerator extends AbstractGenerator {
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// Assume the root element is a Document.
		val doc = resource.contents.head as Document
		val builder = new StringBuilder
		builder.append("TrustModel {\n")
		
		// Iterate over the statements in the PROV-N model.
		for (stmt : doc.name.statements) {
			if (stmt instanceof Entity) {
				val entity = stmt as Entity
				// Look for an attribute with label "prov:value"
				val valueAttr = entity.attributes.filter[ a | a.label == "prov:value" ]
				if (valueAttr !== null) {
					// Only generate an UncertainElement if the entity has a value.
					builder.append("    UncertainElement " + entity.name + " {\n")
					builder.append("        beliefs { \n")
					// Here, we add one default belief. In practice, experts might refine this.
					builder.append("            Belief default (Expert1, (0.8, 0.1, 0.1, 0.5))\n")
					builder.append("        }\n")
					builder.append("    }\n")
				}
			}
		}
		
		builder.append("}\n")
		// Generate the file. Adjust the target folder/path as needed.
		fsa.generateFile("generated/TrustModel.trustdsl", builder.toString)
	}
        

    // Helper method to retrieve an attribute value from an Entity given a label.
//    private static String getAttributeValue(Entity entity, String attributeLabel) {
//        for (Attribute attr : entity.getAttributes()) {
//            // attr.getLabel() returns a string produced by the QualifiedName datatype rule.
//            if (attr.getLabel().equals(attributeLabel)) {
//                return attr.getValue();
//            }
//        }
//        return null;
//    }
//
//    // Looks up an UncertainElement by name; if not found, creates one.
//    private static UncertainElement findOrCreateUncertainElement(UncertaintyModel uncertaintyModel, String name) {
//        for (UncertainElement ue : uncertaintyModel.getUncertainElements()) {
//            if (ue.getName().equals(name)) {
//                return ue;
//            }
//        }
//        UncertainElement newUE = UncertaintyFactory.eINSTANCE.createUncertainElement();
//        newUE.setName(name);
//        uncertaintyModel.getUncertainElements().add(newUE);
//        return newUE;
//    }
//
//    // Example fusion operator: compute consensus as a simple average of the base value and any additional opinions.
//    private static double computeConsensus(UncertainElement ue) {
//        double base = ue.getBaseValue();
//        List<Double> opinions = ue.getOpinions(); // Assume getOpinions() returns a list of Double values.
//        if (opinions == null || opinions.isEmpty()) {
//            return base;
//        }
//        double sum = base;
//        for (Double opinion : opinions) {
//            sum += opinion;
//        }
//        return sum / (opinions.size() + 1);
//    }
}

