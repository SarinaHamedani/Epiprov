// Merge the top-level Model container
rule MergeModel
merge l : Left!EModel
with r : Right!EModel
into t : Target!EModel {
    // Merge imports by combining both lists
    t.imports.addAll(l.imports);
	t.imports.addAll(r.imports);
    
    t.startModel = new Target!StartModel();
    if (l.startModel.isDefined() and r.startModel.isDefined()) {
        t.startModel.name = l.startModel.name + ";" + r.startModel.name;
    } else {
        t.startModel.name = "DiseaseModel";
    }

    t.elements.addAll(l.elements);
    for (element in r.elements.collect(e | e)) {
	    if (not t.elements.exists(e | e.name == element.name)) {
	        t.elements.add(element);
	    }
	}

    t.endModel = new Target!EndModel();
    
    
    var resource = t.eResource;
    resource.getContents().clear();
    resource.getContents().add(t);
    System.out.println("Post-processing complete: resource contents updated.");

}

rule MergeSpecies
merge l : Left!Species
with r : Right!Species
into t : Target!Species 
extends MergeElements {
    t.name = l.name;
	System.out.println("Merge species: " + t.name);
    t.initialPopulation = l.initialPopulation + r.initialPopulation;
}

// Merge other Elements (functions, parameters, observables)
rule MergeElements
merge l : Left!Element
with r : Right!Element
into t : Target!Element {
	System.out.println("Merge Elements");
    t.name = l.name;
}
