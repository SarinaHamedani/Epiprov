// Merge the top-level Document container
rule MergeDocuments
merge l : Left!Document
with r : Right!Document
into t : Target!Document {
    t.compartmentalModel = new Target!Model();
    
    t.compartmentalModel.statements.addAll(l.compartmentalModel.statements);
    
    for (statement in r.compartmentalModel.statements.collect(s | s)) {
        if (not t.compartmentalModel.statements.exists(s | s.equals(statement))) {
            t.compartmentalModel.statements.add(statement);
        }
    }
    
    // Create combined model entity:
    var combinedEntity = new Target!Entity();
    combinedEntity.name = "provbook:combined_model";
    combinedEntity.attributes.add(new Target!Attribute("prov:type", "\"prov:Entity\""));
    combinedEntity.attributes.add(new Target!Attribute("prov:label", "\"Combined Model\""));
    t.compartmentalModel.statements.add(combinedEntity);
    
    // Create merge activity:
    var mergeActivity = new Target!Activity();
    mergeActivity.name = "provbook:Merge";
    t.compartmentalModel.statements.add(mergeActivity);
    
    // Create GEODES_Epimodel agent:
    var geodesAgent = new Target!Agent();
    geodesAgent.name = "provbook:GEODES_Epimodel";
    t.compartmentalModel.statements.add(geodesAgent);
    
    // Create wasGeneratedBy relation:
    var genBy = new Target!WasGeneratedBy();
    genBy.entity = combinedEntity;
    genBy.activity = mergeActivity;
    // Set time to null instead of a string literal
    genBy.time = null;
    t.compartmentalModel.statements.add(genBy);
    
    // Create wasAssociatedWith relation:
    var assocWith = new Target!WasAssociatedWith();
    assocWith.activity = mergeActivity;
    assocWith.agent = geodesAgent;
    t.compartmentalModel.statements.add(assocWith);
    
    // Use the left document's name to create a used relation:
    var usedLeft = new Target!Used();
    usedLeft.activity = mergeActivity;
    var leftEntity = new Target!Entity();
    leftEntity.name = "provbook:" + l.compartmentalModel.name;
    usedLeft.entity = leftEntity;
    usedLeft.time = null;
    t.compartmentalModel.statements.add(usedLeft);
    
    // Use the right document's name to create a used relation:
    var usedRight = new Target!Used();
    usedRight.activity = mergeActivity;
    var rightEntity = new Target!Entity();
    rightEntity.name = "provbook:" + r.compartmentalModel.name;
    usedRight.entity = rightEntity;
    usedRight.time = null;
    t.compartmentalModel.statements.add(usedRight);
    
    var resource = t.eResource;
    resource.getContents().clear();
    resource.getContents().add(t);
    System.out.println("Post-processing complete: resource contents updated.");
    System.out.println("Merged Document with " + t.compartmentalModel.namespaces.size() + " namespaces and " + t.compartmentalModel.statements.size() + " statements.");
}

// Merge Namespaces ensuring unique namespaces
rule MergeNamespaces
merge l : Left!Namespace
with r : Right!Namespace
into t : Target!Namespace {
    t.name = l.name;
    t.uri = l.uri;
}