@dc:description "A vocabulary about birds provenance"
@dc:creator "W3C"
@dc:rights "Copyright 2013 W3C."
@dc:source "http://www.w3.org/ns/prov"
@rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-primer-20130430/#intuitive-overview-of-prov"
@rdfs:seeAlso "https://www.w3.org/TR/2013/REC-prov-o-20130430/"
@dc:description "
The qualification pattern is converted into an equivalent reification pattern.
The following specialized qualification patterns are not modeled in OML in this version 
but could be easily added if needed:
- Revision, qualifiedRevision, wasRevisionOf
- PrimarySource, qualifiedPrimarySource, hadPrimarySource
- Quotation, qualifiedQuotation, wasQuotedFrom"
@dc:title "PROV-O"
vocabulary <http://example.com/project/prov#> as prov {

	extends <http://purl.org/dc/elements/1.1/> as dc

	extends <http://www.w3.org/2001/XMLSchema#> as xsd

	extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs

	@rdfs:comment "The domain of prov:atLocation"
	aspect ActivityOrAgentOrEntityOrInstantaneousEvent

	@rdfs:comment "The domain and range of prov:influenced"
	aspect ActivityOrAgentOrEntity < ActivityOrAgentOrEntityOrInstantaneousEvent

	@rdfs:comment "The domain of prov:hadRole"
	aspect AssociationOrInfluenceOrInstantaneousEvent

	@rdfs:comment "The domain of prov:hadAvtivity"
	aspect InfluenceOrDelegationOrDerivationOrEndOrStart

	@rdfs:comment "An entity is a physical, digital, conceptual, or other kind of thing with some fixed aspects; entities may be real or imaginary."
	concept Entity < ActivityOrAgentOrEntity

	@rdfs:comment "An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities."
	concept Activity < ActivityOrAgentOrEntity

	@rdfs:comment "An agent is something that bears some form of responsibility for an activity taking place, for the existence of an entity, or for another agent's activity."
	concept Agent < ActivityOrAgentOrEntity


	@rdfs:comment "Generation is the completion of production of a new entity by an activity. This entity did not exist before generation and becomes available for usage after this generation."
	relation entity Generation [
		from Entity
		to Activity
		forward wasGeneratedBy
		reverse generated
		functional
	] < ActivityInfluence, InstantaneousEvent


	@rdfs:comment '''A derivation is a transformation of an entity into another, an update of an entity resulting in a new one, or the construction of a new entity based on a pre-existing entity.'''
	relation entity Derivation [
		from Entity
		to Entity
		forward wasDerivedFrom
		reverse hadDerivation
		asymmetric
		irreflexive
	] < EntityInfluence, InstantaneousEvent, InfluenceOrDelegationOrDerivationOrEndOrStart

	rule wasDerivedFromIndirectly [
		wasDerivedFrom(x,y) & wasDerivedFrom(y,z) -> wasDerivedFrom(x,z)
	]
	
	@rdfs:comment '''Attribution is the ascribing of an entity to an agent.'''
	relation entity Attribution [
		from Entity 
		to Agent
		forward wasAttributedTo
		reverse contributed
	] < AgentInfluence

	@rdfs:comment "Start is when an activity is deemed to have been started by an entity, known as trigger. The activity did not exist before its start. Any usage, generation, or invalidation involving an activity follows the activity's start. A start may refer to a trigger entity that set off the activity, or to an activity, known as starter, that generated the trigger."
	scalar property startedAtTime [
		domain Activity
		range xsd:dateTime
	]


	@rdfs:comment '''Usage is the beginning of utilizing an entity by an activity. Before usage, the activity had not begun to utilize this entity and could not have been affected by the entity.
	'''
	relation entity Usage [
		from Activity
		to Entity
		forward used
		reverse wasUsedBy
	] < Influence

	relation entity Communication [
		from Activity
		to Activity
		@rdfs:comment '''Communication is the exchange of some unspecified entity by two activities, one activity using some entity generated by the other.'''
		forward wasInformedBy
		reverse informed
		irreflexive
	] < ActivityInfluence

	@rdfs:comment "End is when an activity is deemed to have been ended by an entity, known as trigger. The activity no longer exists after its end. Any usage, generation, or invalidation involving an activity precedes the activity's end. An end may refer to a trigger entity that terminated the activity, or to an activity, known as ender that generated the trigger."
	scalar property endedAtTime [
		domain Activity
		range xsd:dateTime
	]

	relation entity Association [
		from Activity 
		to Agent
		forward wasAssociatedWith
		reverse wasAssociateFor
	] < AgentInfluence, AssociationOrInfluenceOrInstantaneousEvent 

	relation entity Delegation [
		from Agent
		to Agent
		forward actedOnBehalfOf
		reverse hadDelegate
		irreflexive
		asymmetric
	] < AgentInfluence, InfluenceOrDelegationOrDerivationOrEndOrStart 

	@rdfs:comment "A collection is an entity that provides a structure to some constituents, which are themselves entities. These constituents are said to be member of the collections."
	concept Collection < Entity

	@rdfs:comment "An empty collection is a collection without members."
	concept EmptyCollection < Collection [
		restricts hadMember to max 0
	]
 
	@rdfs:comment "A bundle is a named set of provenance descriptions, and is itself an Entity, so allowing provenance of provenance to be expressed."
	concept Bundle < Entity

	@rdfs:comment "Person agents are people."
	concept Person < Agent

	@rdfs:comment "A software agent is running software."
	concept SoftwareAgent < Agent


	@rdfs:comment "An organization is a social or legal institution such as a company, society, etc."
	concept Organization < Agent

	@rdfs:comment "A location can be an identifiable geographic place (ISO 19112), but it can also be a non-geographic place such as a directory, row, or column. As such, there are numerous ways in which location can be expressed, such as by a coordinate, address, landmark, and so forth."
	concept Location

	relation entity Alternate [
		from Entity
		to Entity		
		forward alternateOf
		irreflexive
		symmetric
	]

	relation entity Specialization [
		from Entity
		to Entity
		forward specializationOf
		reverse generalizationOf
		irreflexive
		asymmetric
	] < Alternate 

	@rdfs:comment "The time at which an entity was completely created and is available for use. Generation is the completion of production of a new entity by an activity. This entity did not exist before generation and becomes available for usage after this generation."
	scalar property generatedAtTime [
		domain Entity
		range xsd:dateTime
	]

	relation entity PrimarySource [
		from Entity
		to Entity
		forward hadPrimarySource
		reverse wasPrimarySourceOf
		irreflexive
		asymmetric
	] < Derivation 

	relation entity Quotation [
		from Entity
		to Entity
		forward wasQuotedFrom
		reverse quotedAs
		asymmetric
		irreflexive
	] < Derivation 

	relation entity Revision [
		from Entity
		to Entity
		forward wasRevisionOf
		reverse hadRevision
		asymmetric
		irreflexive
	] < Derivation 

	@rdfs:comment "Invalidation is the start of the destruction, cessation, or expiry of an existing entity by an activity. The entity is no longer available for use (or further invalidation) after invalidation. Any generation or usage of an entity precedes its invalidation."
	scalar property invalidatedAtTime [
		domain Entity
		range xsd:dateTime
	]

	relation entity Invalidation [
		from Entity
		to Activity
		forward wasInvalidatedBy
		reverse invalidated
		functional
		asymmetric
		irreflexive
	] < EntityInfluence, InstantaneousEvent 

	relation entity Member [
		from Collection
		to Entity
		forward hadMember
		reverse wasMemberOf
		asymmetric
		irreflexive
	]

	relation entity Start [
		from Activity
		to Entity		
		forward wasStartedBy
	] < Influence, InstantaneousEvent, InfluenceOrDelegationOrDerivationOrEndOrStart 

	relation entity End [
		from Activity
		to Entity		
		forward wasEndedBy
	] < Influence, InstantaneousEvent, InfluenceOrDelegationOrDerivationOrEndOrStart

	@rdfs:comment "The names of the forward/reverse properties for the specializations follow the names of the forward/reverse properties defined here."
  relation entity Influence [
		from ActivityOrAgentOrEntity
		to ActivityOrAgentOrEntity
		forward wasInfluencedBy 
		reverse influenced
		asymmetric
		irreflexive
	] < AssociationOrInfluenceOrInstantaneousEvent, InfluenceOrDelegationOrDerivationOrEndOrStart 

	relation entity AtLocation [
		from ActivityOrAgentOrEntityOrInstantaneousEvent
		to Location
		forward atLocation
		reverse locationOf
	]

	@rdfs:comment "The names of the properties follow the naming convention for the Influence properties."
	relation entity EntityInfluence [
		from Entity
		to ActivityOrAgentOrEntity
		forward entityInfluenced
		reverse wasInfluencedByEntity
		asymmetric
		irreflexive
	] < Influence


	@rdfs:comment "The names of the properties follow the naming convention for the Influence properties."
	relation entity ActivityInfluence [
		from ActivityOrAgentOrEntity 
		to Activity
		forward wasInfluencedByActivity 
		reverse activityInfluenced
		asymmetric
		irreflexive
	] < Influence 

	@rdfs:comment "The names of the properties follow the naming convention for the Influence properties."
	relation entity AgentInfluence [
		from ActivityOrAgentOrEntity
		to Agent
		forward wasInfluencedByAgent
		reverse agentInfluenced
		asymmetric
		irreflexive
	] < Influence 

	concept Plan < Entity

	aspect InstantaneousEvent < AssociationOrInfluenceOrInstantaneousEvent, ActivityOrAgentOrEntityOrInstantaneousEvent

	@rdfs:comment """A role is the function of an entity or agent with respect to an activity, in the context of a usage, generation, invalidation, association, start, and end."""
	concept Role

  	@rdfs:comment """Influence is the capacity of an entity, activity, or agent to have an effect on the character, development, or behavior of another by means of usage, start, end, generation, invalidation, communication, derivation, attribution, association, or delegation.
	Because prov:qualifiedInfluence is a broad relation, the more specific relations (qualifiedCommunication, qualifiedDelegation, qualifiedEnd, etc.) should be used when applicable."""
	relation entity QualifiedInfluence [
		from ActivityOrAgentOrEntity
		to Influence
		forward qualifiedInfluence
		reverse qualifiedInfluenceOf
	]

	@rdfs:comment """Generation is the completion of production of a new entity by an activity. This entity did not exist before generation and becomes available for usage after this generation.
  If this Activity prov:generated Entity :e, then it can qualify how it performed the Generation using prov:qualifiedGeneration [ a prov:Generation; prov:entity :e; :foo :bar ]."""
	relation entity QualifiedGeneration [
		from Entity
		to Generation
		forward qualifiedGeneration
		reverse qualifiedGenerationOf
	] < QualifiedInfluence 

	@rdfs:comment """A derivation is a transformation of an entity into another, an update of an entity resulting in a new one, or the construction of a new entity based on a pre-existing entity.
	If this Entity prov:wasDerivedFrom Entity :e, then it can qualify how it was derived using prov:qualifiedDerivation [ a prov:Derivation; prov:entity :e; :foo :bar ]."""
	relation entity QualifiedDerivation [
		from Entity
		to Derivation
		forward qualifiedDerivation
		reverse qualifiedDerivationOf
	] < QualifiedInfluence
	
	@rdfs:comment """A revision is a derivation for which the resulting entity is a revised version of some original. The implication here is that the resulting entity contains substantial content from the original. Revision is a particular case of derivation.
	If this Entity prov:wasRevisionOf Entity :e, then it can qualify how it was revised using prov:qualifiedRevision [ a prov:Revision; prov:entity :e; :foo :bar ]."""
	relation entity QualifiedRevision [
		from Entity
		to Revision
		forward qualifiedRevision
		reverse revisedEntity
	] < QualifiedInfluence 

	@rdfs:comment """Attribution is the ascribing of an entity to an agent. When an entity e is attributed to agent ag, entity e was generated by some unspecified activity that in turn was associated to agent ag. Thus, this relation is useful when the activity is not known, or irrelevant.
	If this Entity prov:wasAttributedTo Agent :ag, then it can qualify how it was influenced using prov:qualifiedAttribution [ a prov:Attribution; prov:agent :ag; :foo :bar ]."""
	relation entity QualifiedAttribution [
		from Entity
		to Attribution
		forward qualifiedAttribution
		reverse qualifiedAttributionOf
	] < QualifiedInfluence 

	@rdfs:comment """Invalidation is the start of the destruction, cessation, or expiry of an existing entity by an activity. The entity is no longer available for use (or further invalidation) after invalidation. Any generation or usage of an entity precedes its invalidation.
	If this Entity prov:wasInvalidatedBy Activity :a, then it can qualify how it was invalidated using prov:qualifiedInvalidation [ a prov:Invalidation; prov:activity :a; :foo :bar ]."""
	relation entity QualifiedInvalidation [
		from Activity
		to Invalidation
		forward qualifiedInvalidation
		reverse qualifiedInvalidationOf
	] < QualifiedInfluence 

	@rdfs:comment """Start is when an activity is deemed to have been started by an entity, known as trigger. The activity did not exist before its start. Any usage, generation, or invalidation involving an activity follows the activity's start. A start may refer to a trigger entity that set off the activity, or to an activity, known as starter, that generated the trigger.
	If this Activity prov:wasStartedBy Entity :e1, then it can qualify how it was started using prov:qualifiedStart [ a prov:Start; prov:entity :e1; :foo :bar ]."""
	relation entity QualifiedStart [
		from Entity
		to Start
		forward qualifiedStart
		reverse qualifiedStartOf
	] < QualifiedInfluence 

	@rdfs:comment """Usage is the beginning of utilizing an entity by an activity. Before usage, the activity had not begun to utilize this entity and could not have been affected by the entity.
	If this Activity prov:used Entity :e, then it can qualify how it used it using prov:qualifiedUsage [ a prov:Usage; prov:entity :e; :foo :bar ]."""
	relation entity QualifiedUsage [
		from Activity
		to Usage
		forward qualifiedUsage
		reverse qualifiedUsingActivity
	] < QualifiedInfluence 

	relation entity QualifiedCommunication [
		from Activity
		to Communication
		forward qualifiedCommunication
		reverse qualifiedCommunicationOf
	] < QualifiedInfluence 


	relation entity QualifiedAssociation [
		from Activity
		to Association
		forward qualifiedAssociation
		reverse qualifiedAssociationOf
	] < QualifiedInfluence 

	relation entity QualifiedEnd [
		from Entity
		to End
		forward qualifiedEnd
		reverse qualifiedEndOf
	] < QualifiedInfluence

	relation entity QualifiedDelegation [
		from Agent
		to Delegation
		forward qualifiedDelegation
		reverse qualifiedDelegationOf
	] < QualifiedInfluence 

	relation entity Influencer [
		from Influence
		to ActivityOrAgentOrEntity
		forward influencer
		reverse hadInfluence
	]

	relation entity InfluencerEntity [
		from EntityInfluence
		to Entity
		forward ^entity
		reverse entityOfInfluence
	] < Influencer 


	relation entity HadUsage [
		from Derivation
		to Usage
		forward hadUsage
		reverse wasUsedInDerivation
	]

	 relation entity HadGeneration [
	 	from Derivation
	 	to Generation
	 	forward hasGeneration
		reverse generatedAsDerivation
	 ]
 

	relation entity InfluencerActivity [
		from ActivityInfluence
		to Activity
		forward activity
		reverse activityOfInfluence
	] < Influencer 

	relation entity InfluencerAgent [
		from AgentInfluence
		to Agent
		forward agent
		reverse agentOfInfluence
	] < Influencer 

	relation entity HadPlan [
		from Association
		to Plan
		forward hadPlan
		reverse wasPlanOf
	]

	relation entity HadActivity [
		from InfluenceOrDelegationOrDerivationOrEndOrStart
		to Activity
		forward hadActivity
		reverse wasActivityOfInfluence
	]

	scalar property atTime [
		domain InstantaneousEvent
		range xsd:dateTime
	]

	relation entity HadRole [
		from AssociationOrInfluenceOrInstantaneousEvent
		to Role
		@rdfs:comment "A role is the function of an entity or agent with respect to an activity, in the context of a usage, generation, invalidation, association, start, and end."
		forward hadRole
		reverse wasRoleIn
	]

	rule activity_of_ActivityInfluence [
		ActivityInfluence(ae, i, a) -> activity(i, a)
	]

	rule agent_of_AgentInfluence [
		AgentInfluence(aae, r, ag) -> agent(r, ag)
	]

	rule entity_of_EntityInfluence [
		EntityInfluence(e, r, ae) -> ^entity(r, e)
	]

	rule influencer_of_Influence [
		Influence(aae1, r, aae2) -> influencer(r, aae1)
	]

	rule qualifiedAssociation_associated [
		Association(act, r, ag) -> qualifiedAssociation(act, r)
	]

	rule qualifiedAttribution_attributed [
		Attribution(e, r, a) -> qualifiedAttribution(a, r)
	]

	rule qualifiedCommunication_informed [
		Communication(a1, r, a2) -> qualifiedCommunication(a1, r)
	]

	rule qualifiedDelegation_delegated [
		Delegation(a1, r, a2) -> qualifiedDelegation(a1, r)
	]

	rule qualifiedDerivation_derived [
		Derivation(e1, r, e2) -> qualifiedDerivation(e1, r)
	]

	rule qualifiedEnd_ended [
		End(a, r, e) -> qualifiedEnd(e, r)
	]

	rule qualifiedGeneration_generated [
		Generation(e, g, a) -> qualifiedGeneration(e, g)
	]

	rule qualifiedInfluence_influenced [
		Influence(aae1, i, aae2) -> qualifiedInfluence(aae1, i)
	]

	rule qualifiedInvalidation_invalidated [
		Invalidation(e, r, a) -> qualifiedInvalidation(a, r)
	]

	rule qualifiedStart_started [
		Start(a, r, e) -> qualifiedStart(e, r)
	]

	rule qualifiedUsage_usage [
		Usage(a, r, e) -> qualifiedUsage(a, r)
	]

  	concept EntityAndAgent < Entity, Agent
  
  	concept ActivityAndAgent < Activity, Agent
}